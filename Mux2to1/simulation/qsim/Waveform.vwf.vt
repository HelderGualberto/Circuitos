// Copyright (C) 1991-2014 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/16/2014 19:25:45"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Mux8Bits
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Mux8Bits_vlg_sample_tst(
	inputX,
	inputY,
	s,
	sampler_tx
);
input [7:0] inputX;
input [7:0] inputY;
input  s;
output sampler_tx;

reg sample;
time current_time;
always @(inputX or inputY or s)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Mux8Bits_vlg_check_tst (
	output,
	sampler_rx
);
input [7:0] output;
input sampler_rx;

reg [7:0] output_expected;

reg [7:0] output_prev;

reg [7:0] output_expected_prev;

reg [7:0] last_output_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:1] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 1'b1;
end

// update real /o prevs

always @(trigger)
begin
	output_prev = output;
end

// update expected /o prevs

always @(trigger)
begin
	output_expected_prev = output_expected;
end


// expected \output [ 7 ]
initial
begin
	output_expected[7] = 1'bX;
	output_expected[7] = #999000 1'b0;
end 
// expected \output [ 6 ]
initial
begin
	output_expected[6] = 1'bX;
	output_expected[6] = #999000 1'b0;
end 
// expected \output [ 5 ]
initial
begin
	output_expected[5] = 1'bX;
	output_expected[5] = #999000 1'b0;
end 
// expected \output [ 4 ]
initial
begin
	output_expected[4] = 1'bX;
	output_expected[4] = #999000 1'b0;
end 
// expected \output [ 3 ]
initial
begin
	output_expected[3] = 1'bX;
	output_expected[3] = #999000 1'b0;
end 
// expected \output [ 2 ]
initial
begin
	output_expected[2] = 1'bX;
	output_expected[2] = #999000 1'b0;
end 
// expected \output [ 1 ]
initial
begin
	output_expected[1] = 1'bX;
	output_expected[1] = #999000 1'b0;
end 
// expected \output [ 0 ]
initial
begin
	output_expected[0] = 1'bX;
	output_expected[0] = #999000 1'b0;
end 
// generate trigger
always @(output_expected or output)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected output = %b | ",output_expected_prev);
	$display("| real output = %b | ",output_prev);
`endif
	if (
		( output_expected_prev[0] !== 1'bx ) && ( output_prev[0] !== output_expected_prev[0] )
		&& ((output_expected_prev[0] !== last_output_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_expected_prev);
		$display ("     Real value = %b", output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_output_exp[0] = output_expected_prev[0];
	end
	if (
		( output_expected_prev[1] !== 1'bx ) && ( output_prev[1] !== output_expected_prev[1] )
		&& ((output_expected_prev[1] !== last_output_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_expected_prev);
		$display ("     Real value = %b", output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_output_exp[1] = output_expected_prev[1];
	end
	if (
		( output_expected_prev[2] !== 1'bx ) && ( output_prev[2] !== output_expected_prev[2] )
		&& ((output_expected_prev[2] !== last_output_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_expected_prev);
		$display ("     Real value = %b", output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_output_exp[2] = output_expected_prev[2];
	end
	if (
		( output_expected_prev[3] !== 1'bx ) && ( output_prev[3] !== output_expected_prev[3] )
		&& ((output_expected_prev[3] !== last_output_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_expected_prev);
		$display ("     Real value = %b", output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_output_exp[3] = output_expected_prev[3];
	end
	if (
		( output_expected_prev[4] !== 1'bx ) && ( output_prev[4] !== output_expected_prev[4] )
		&& ((output_expected_prev[4] !== last_output_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_expected_prev);
		$display ("     Real value = %b", output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_output_exp[4] = output_expected_prev[4];
	end
	if (
		( output_expected_prev[5] !== 1'bx ) && ( output_prev[5] !== output_expected_prev[5] )
		&& ((output_expected_prev[5] !== last_output_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_expected_prev);
		$display ("     Real value = %b", output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_output_exp[5] = output_expected_prev[5];
	end
	if (
		( output_expected_prev[6] !== 1'bx ) && ( output_prev[6] !== output_expected_prev[6] )
		&& ((output_expected_prev[6] !== last_output_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_expected_prev);
		$display ("     Real value = %b", output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_output_exp[6] = output_expected_prev[6];
	end
	if (
		( output_expected_prev[7] !== 1'bx ) && ( output_prev[7] !== output_expected_prev[7] )
		&& ((output_expected_prev[7] !== last_output_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_expected_prev);
		$display ("     Real value = %b", output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_output_exp[7] = output_expected_prev[7];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#100000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Mux8Bits_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [7:0] inputX;
reg [7:0] inputY;
reg s;
// wires                                               
wire [7:0] output;

wire sampler;                             

// assign statements (if any)                          
Mux8Bits i1 (
// port map - connection between master ports and signals/registers   
	.inputX(inputX),
	.inputY(inputY),
	.\output (output),
	.s(s)
);
// inputX[ 7 ]
initial
begin
	inputX[7] = 1'b1;
	inputX[7] = #20000000 1'b0;
	inputX[7] = #15000000 1'b1;
	inputX[7] = #10000000 1'b0;
	inputX[7] = #5000000 1'b1;
	inputX[7] = #5000000 1'b0;
	inputX[7] = #15000000 1'b1;
	inputX[7] = #15000000 1'b0;
end 
// inputX[ 6 ]
initial
begin
	inputX[6] = 1'b1;
	inputX[6] = #10000000 1'b0;
	inputX[6] = #10000000 1'b1;
	inputX[6] = #10000000 1'b0;
	inputX[6] = #5000000 1'b1;
	inputX[6] = #15000000 1'b0;
	inputX[6] = #10000000 1'b1;
	inputX[6] = #5000000 1'b0;
	inputX[6] = #15000000 1'b1;
end 
// inputX[ 5 ]
initial
begin
	inputX[5] = 1'b1;
	inputX[5] = #5000000 1'b0;
	inputX[5] = #10000000 1'b1;
	inputX[5] = #10000000 1'b0;
	inputX[5] = #20000000 1'b1;
	inputX[5] = #5000000 1'b0;
	inputX[5] = #15000000 1'b1;
	inputX[5] = #5000000 1'b0;
	inputX[5] = #5000000 1'b1;
	inputX[5] = #10000000 1'b0;
	inputX[5] = #5000000 1'b1;
end 
// inputX[ 4 ]
initial
begin
	inputX[4] = 1'b1;
	inputX[4] = #5000000 1'b0;
	inputX[4] = #5000000 1'b1;
	inputX[4] = #10000000 1'b0;
	inputX[4] = #25000000 1'b1;
	inputX[4] = #15000000 1'b0;
	inputX[4] = #10000000 1'b1;
	inputX[4] = #10000000 1'b0;
	inputX[4] = #5000000 1'b1;
	inputX[4] = #5000000 1'b0;
	inputX[4] = #5000000 1'b1;
end 
// inputX[ 3 ]
initial
begin
	inputX[3] = 1'b1;
	inputX[3] = #15000000 1'b0;
	inputX[3] = #5000000 1'b1;
	inputX[3] = #5000000 1'b0;
	inputX[3] = #30000000 1'b1;
	inputX[3] = #5000000 1'b0;
	inputX[3] = #5000000 1'b1;
	inputX[3] = #10000000 1'b0;
	inputX[3] = #15000000 1'b1;
end 
// inputX[ 2 ]
initial
begin
	inputX[2] = 1'b0;
	inputX[2] = #10000000 1'b1;
	inputX[2] = #20000000 1'b0;
	inputX[2] = #15000000 1'b1;
	inputX[2] = #10000000 1'b0;
	inputX[2] = #10000000 1'b1;
	inputX[2] = #5000000 1'b0;
	inputX[2] = #5000000 1'b1;
	inputX[2] = #5000000 1'b0;
	inputX[2] = #5000000 1'b1;
end 
// inputX[ 1 ]
initial
begin
	inputX[1] = 1'b0;
	inputX[1] = #10000000 1'b1;
	inputX[1] = #25000000 1'b0;
	inputX[1] = #5000000 1'b1;
	inputX[1] = #10000000 1'b0;
	inputX[1] = #5000000 1'b1;
	inputX[1] = #10000000 1'b0;
	inputX[1] = #5000000 1'b1;
	inputX[1] = #20000000 1'b0;
end 
// inputX[ 0 ]
initial
begin
	inputX[0] = 1'b1;
	inputX[0] = #15000000 1'b0;
	inputX[0] = #15000000 1'b1;
	inputX[0] = #5000000 1'b0;
	inputX[0] = #5000000 1'b1;
	inputX[0] = #5000000 1'b0;
	inputX[0] = #15000000 1'b1;
	inputX[0] = #15000000 1'b0;
	inputX[0] = #5000000 1'b1;
	inputX[0] = #10000000 1'b0;
	inputX[0] = #5000000 1'b1;
end 
// inputY[ 7 ]
initial
begin
	inputY[7] = 1'b1;
	inputY[7] = #35000000 1'b0;
	inputY[7] = #20000000 1'b1;
	inputY[7] = #5000000 1'b0;
	inputY[7] = #10000000 1'b1;
	inputY[7] = #20000000 1'b0;
	inputY[7] = #5000000 1'b1;
end 
// inputY[ 6 ]
initial
begin
	inputY[6] = 1'b1;
	inputY[6] = #10000000 1'b0;
	inputY[6] = #5000000 1'b1;
	inputY[6] = #10000000 1'b0;
	inputY[6] = #10000000 1'b1;
	inputY[6] = #5000000 1'b0;
	inputY[6] = #5000000 1'b1;
	inputY[6] = #20000000 1'b0;
	inputY[6] = #5000000 1'b1;
	inputY[6] = #15000000 1'b0;
end 
// inputY[ 5 ]
initial
begin
	inputY[5] = 1'b0;
	inputY[5] = #5000000 1'b1;
	inputY[5] = #5000000 1'b0;
	inputY[5] = #15000000 1'b1;
	inputY[5] = #5000000 1'b0;
	inputY[5] = #5000000 1'b1;
	inputY[5] = #5000000 1'b0;
	inputY[5] = #15000000 1'b1;
	inputY[5] = #5000000 1'b0;
	inputY[5] = #5000000 1'b1;
	inputY[5] = #10000000 1'b0;
	inputY[5] = #5000000 1'b1;
	inputY[5] = #5000000 1'b0;
	inputY[5] = #5000000 1'b1;
end 
// inputY[ 4 ]
initial
begin
	inputY[4] = 1'b0;
	inputY[4] = #10000000 1'b1;
	inputY[4] = #20000000 1'b0;
	inputY[4] = #10000000 1'b1;
	inputY[4] = #10000000 1'b0;
	inputY[4] = #10000000 1'b1;
	inputY[4] = #5000000 1'b0;
	inputY[4] = #5000000 1'b1;
	inputY[4] = #5000000 1'b0;
	inputY[4] = #10000000 1'b1;
	inputY[4] = #5000000 1'b0;
end 
// inputY[ 3 ]
initial
begin
	inputY[3] = 1'b0;
	inputY[3] = #5000000 1'b1;
	inputY[3] = #5000000 1'b0;
	inputY[3] = #5000000 1'b1;
	inputY[3] = #5000000 1'b0;
	inputY[3] = #5000000 1'b1;
	inputY[3] = #5000000 1'b0;
	inputY[3] = #5000000 1'b1;
	inputY[3] = #5000000 1'b0;
	inputY[3] = #5000000 1'b1;
	inputY[3] = #20000000 1'b0;
	inputY[3] = #5000000 1'b1;
	inputY[3] = #15000000 1'b0;
	inputY[3] = #5000000 1'b1;
	inputY[3] = #5000000 1'b0;
end 
// inputY[ 2 ]
initial
begin
	inputY[2] = 1'b1;
	inputY[2] = #5000000 1'b0;
	inputY[2] = #5000000 1'b1;
	inputY[2] = #5000000 1'b0;
	inputY[2] = #20000000 1'b1;
	inputY[2] = #5000000 1'b0;
	inputY[2] = #10000000 1'b1;
	inputY[2] = #10000000 1'b0;
	inputY[2] = #5000000 1'b1;
	inputY[2] = #10000000 1'b0;
	inputY[2] = #5000000 1'b1;
	inputY[2] = #10000000 1'b0;
end 
// inputY[ 1 ]
initial
begin
	inputY[1] = 1'b0;
	inputY[1] = #20000000 1'b1;
	inputY[1] = #5000000 1'b0;
	inputY[1] = #15000000 1'b1;
	inputY[1] = #5000000 1'b0;
	inputY[1] = #10000000 1'b1;
	inputY[1] = #15000000 1'b0;
	inputY[1] = #10000000 1'b1;
	inputY[1] = #5000000 1'b0;
	inputY[1] = #10000000 1'b1;
end 
// inputY[ 0 ]
initial
begin
	inputY[0] = 1'b0;
	inputY[0] = #10000000 1'b1;
	inputY[0] = #5000000 1'b0;
	inputY[0] = #20000000 1'b1;
	inputY[0] = #15000000 1'b0;
	inputY[0] = #5000000 1'b1;
	inputY[0] = #5000000 1'b0;
	inputY[0] = #5000000 1'b1;
	inputY[0] = #15000000 1'b0;
	inputY[0] = #5000000 1'b1;
end 

// s
initial
begin
	s = 1'b0;
	s = #49920000 1'b1;
	s = #47360000 1'b0;
end 

Mux8Bits_vlg_sample_tst tb_sample (
	.inputX(inputX),
	.inputY(inputY),
	.s(s),
	.sampler_tx(sampler)
);

Mux8Bits_vlg_check_tst tb_out(
	.output(output),
	.sampler_rx(sampler)
);
endmodule

