-- Copyright (C) 2016  Intel Corporation. All rights reserved.
-- Your use of Intel Corporation's design tools, logic functions 
-- and other software and tools, and its AMPP partner logic 
-- functions, and any output files from any of the foregoing 
-- (including device programming or simulation files), and any 
-- associated documentation or information are expressly subject 
-- to the terms and conditions of the Intel Program License 
-- Subscription Agreement, the Intel Quartus Prime License Agreement,
-- the Intel MegaCore Function License Agreement, or other 
-- applicable license agreement, including, without limitation, 
-- that your use is for the sole purpose of programming logic 
-- devices manufactured by Intel and sold by Intel or its 
-- authorized distributors.  Please refer to the applicable 
-- agreement for further details.

-- PROGRAM		"Quartus Prime"
-- VERSION		"Version 16.1.0 Build 196 10/24/2016 SJ Lite Edition"
-- CREATED		"Wed Apr 26 21:33:26 2017"

LIBRARY ieee;
USE ieee.std_logic_1164.all; 

LIBRARY work;

ENTITY edgeDetector IS 
	PORT
	(
		dataSignal :  IN  STD_LOGIC;
		EDGES :  OUT  STD_LOGIC
	);
END edgeDetector;

ARCHITECTURE bdf_type OF edgeDetector IS 

SIGNAL	SYNTHESIZED_WIRE_8 :  STD_LOGIC;
SIGNAL	SYNTHESIZED_WIRE_0 :  STD_LOGIC;
SIGNAL	SYNTHESIZED_WIRE_1 :  STD_LOGIC;
SIGNAL	SYNTHESIZED_WIRE_2 :  STD_LOGIC;
SIGNAL	SYNTHESIZED_WIRE_9 :  STD_LOGIC;
SIGNAL	SYNTHESIZED_WIRE_4 :  STD_LOGIC;
SIGNAL	SYNTHESIZED_WIRE_5 :  STD_LOGIC;
SIGNAL	SYNTHESIZED_WIRE_7 :  STD_LOGIC;
SIGNAL	DFF_inst1 :  STD_LOGIC;


BEGIN 
SYNTHESIZED_WIRE_1 <= '1';
SYNTHESIZED_WIRE_2 <= '1';
SYNTHESIZED_WIRE_4 <= '1';
SYNTHESIZED_WIRE_5 <= '1';



PROCESS(SYNTHESIZED_WIRE_0,SYNTHESIZED_WIRE_8,SYNTHESIZED_WIRE_2)
BEGIN
IF (SYNTHESIZED_WIRE_8 = '0') THEN
	SYNTHESIZED_WIRE_8 <= '0';
ELSIF (SYNTHESIZED_WIRE_2 = '0') THEN
	SYNTHESIZED_WIRE_8 <= '1';
ELSIF (RISING_EDGE(SYNTHESIZED_WIRE_0)) THEN
	SYNTHESIZED_WIRE_8 <= SYNTHESIZED_WIRE_1;
END IF;
END PROCESS;


PROCESS(dataSignal,SYNTHESIZED_WIRE_9,SYNTHESIZED_WIRE_5)
BEGIN
IF (SYNTHESIZED_WIRE_9 = '0') THEN
	DFF_inst1 <= '0';
ELSIF (SYNTHESIZED_WIRE_5 = '0') THEN
	DFF_inst1 <= '1';
ELSIF (RISING_EDGE(dataSignal)) THEN
	DFF_inst1 <= SYNTHESIZED_WIRE_4;
END IF;
END PROCESS;



EDGES <= NOT(SYNTHESIZED_WIRE_9 AND SYNTHESIZED_WIRE_7);


SYNTHESIZED_WIRE_0 <= NOT(dataSignal);



SYNTHESIZED_WIRE_7 <= NOT(SYNTHESIZED_WIRE_8);



SYNTHESIZED_WIRE_9 <= NOT(DFF_inst1);






END bdf_type;