/*<simulation_settings>
<ftestbench_cmd>quartus_eda --gen_testbench --tool=modelsim_oem --format=vhdl --write_settings_files=off serialToParallel -c serialToParallel --vector_source="C:/Users/Orion/Google Drive/SENAC/9 Semestre/Microprocessadores/FPGA/edgeDetector_simulation.vwf" --testbench_file="C:/Users/Orion/Google Drive/SENAC/9 Semestre/Microprocessadores/FPGA/simulation/qsim/edgeDetector_simulation.vwf.vht"</ftestbench_cmd>
<ttestbench_cmd>quartus_eda --gen_testbench --tool=modelsim_oem --format=vhdl --write_settings_files=off serialToParallel -c serialToParallel --vector_source="C:/Users/Orion/Google Drive/SENAC/9 Semestre/Microprocessadores/FPGA/edgeDetector_simulation.vwf" --testbench_file="C:/Users/Orion/Google Drive/SENAC/9 Semestre/Microprocessadores/FPGA/simulation/qsim/edgeDetector_simulation.vwf.vht"</ttestbench_cmd>
<fnetlist_cmd>quartus_eda --write_settings_files=off --simulation --functional=on --flatten_buses=off --tool=modelsim_oem --format=vhdl --output_directory="C:/Users/Orion/Google Drive/SENAC/9 Semestre/Microprocessadores/FPGA/simulation/qsim/" serialToParallel -c serialToParallel</fnetlist_cmd>
<tnetlist_cmd>quartus_eda --write_settings_files=off --simulation --functional=off --flatten_buses=off --timescale=1ps --tool=modelsim_oem --format=vhdl --output_directory="C:/Users/Orion/Google Drive/SENAC/9 Semestre/Microprocessadores/FPGA/simulation/qsim/" serialToParallel -c serialToParallel</tnetlist_cmd>
<modelsim_script>onerror {exit -code 1}
vlib work
vcom -work work serialToParallel.vho
vcom -work work edgeDetector_simulation.vwf.vht
vsim -novopt -c -t 1ps -L cycloneive -L altera -L altera_mf -L 220model -L sgate -L altera_lnsim work.edgeDetector_vhd_vec_tst
vcd file -direction serialToParallel.msim.vcd
vcd add -internal edgeDetector_vhd_vec_tst/*
vcd add -internal edgeDetector_vhd_vec_tst/i1/*
proc simTimestamp {} {
    echo "Simulation time: $::now ps"
    if { [string equal running [runStatus]] } {
        after 2500 simTimestamp
    }
}
after 2500 simTimestamp
run -all
quit -f



</modelsim_script>
<modelsim_script_timing>onerror {exit -code 1}
vlib work
vcom -work work serialToParallel.vho
vcom -work work edgeDetector_simulation.vwf.vht
vsim -novopt -c -t 1ps -sdfmax edgeDetector_vhd_vec_tst/i1=serialToParallel_vhd.sdo -L cycloneive -L altera -L altera_mf -L 220model -L sgate -L altera_lnsim work.edgeDetector_vhd_vec_tst
vcd file -direction serialToParallel.msim.vcd
vcd add -internal edgeDetector_vhd_vec_tst/*
vcd add -internal edgeDetector_vhd_vec_tst/i1/*
proc simTimestamp {} {
    echo "Simulation time: $::now ps"
    if { [string equal running [runStatus]] } {
        after 2500 simTimestamp
    }
}
after 2500 simTimestamp
run -all
quit -f



</modelsim_script_timing>
<hdl_lang>vhdl</hdl_lang>
</simulation_settings>*/
/*
WARNING: Do NOT edit the input and output ports in this file in a text
editor if you plan to continue editing the block that represents it in
the Block Editor! File corruption is VERY likely to occur.
*/

/*
Copyright (C) 2016  Intel Corporation. All rights reserved.
Your use of Intel Corporation's design tools, logic functions 
and other software and tools, and its AMPP partner logic 
functions, and any output files from any of the foregoing 
(including device programming or simulation files), and any 
associated documentation or information are expressly subject 
to the terms and conditions of the Intel Program License 
Subscription Agreement, the Intel Quartus Prime License Agreement,
the Intel MegaCore Function License Agreement, or other 
applicable license agreement, including, without limitation, 
that your use is for the sole purpose of programming logic 
devices manufactured by Intel and sold by Intel or its 
authorized distributors.  Please refer to the applicable 
agreement for further details.
*/

HEADER
{
	VERSION = 1;
	TIME_UNIT = ns;
	DATA_OFFSET = 0.0;
	DATA_DURATION = 1000.0;
	SIMULATION_TIME = 0.0;
	GRID_PHASE = 0.0;
	GRID_PERIOD = 10.0;
	GRID_DUTY_CYCLE = 50;
}

SIGNAL("dataSignal")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("EDGES")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("dataClock")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "";
}

TRANSITION_LIST("dataSignal")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 125.0;
		LEVEL 1 FOR 125.0;
		LEVEL 0 FOR 125.0;
		LEVEL 1 FOR 125.0;
		LEVEL 0 FOR 375.0;
		LEVEL 1 FOR 125.0;
	}
}

TRANSITION_LIST("EDGES")
{
	NODE
	{
		REPEAT = 1;
		LEVEL X FOR 1000.0;
	}
}

TRANSITION_LIST("dataClock")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 64;
			LEVEL 0 FOR 7.813;
			LEVEL 1 FOR 7.812;
		}
	}
}

DISPLAY_LINE
{
	CHANNEL = "dataClock";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 0;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "dataSignal";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 1;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "EDGES";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 2;
	TREE_LEVEL = 0;
}

TIME_BAR
{
	TIME = 0;
	MASTER = TRUE;
}
;
