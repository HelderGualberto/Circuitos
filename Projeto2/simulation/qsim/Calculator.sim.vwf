/*
WARNING: Do NOT edit the input and output ports in this file in a text
editor if you plan to continue editing the block that represents it in
the Block Editor! File corruption is VERY likely to occur.
*/

/*
Copyright (C) 1991-2014 Altera Corporation. All rights reserved.
Your use of Altera Corporation's design tools, logic functions 
and other software and tools, and its AMPP partner logic 
functions, and any output files from any of the foregoing 
(including device programming or simulation files), and any 
associated documentation or information are expressly subject 
to the terms and conditions of the Altera Program License 
Subscription Agreement, the Altera Quartus II License Agreement,
the Altera MegaCore Function License Agreement, or other 
applicable license agreement, including, without limitation, 
that your use is for the sole purpose of programming logic 
devices manufactured by Altera and sold by Altera or its 
authorized distributors.  Please refer to the applicable 
agreement for further details.
*/

HEADER
{
	VERSION = 1;
	TIME_UNIT = ns;
	DATA_OFFSET = 0.0;
	DATA_DURATION = 100000.0;
	SIMULATION_TIME = 0.0;
	GRID_PHASE = 0.0;
	GRID_PERIOD = 10.0;
	GRID_DUTY_CYCLE = 50;
}

SIGNAL("A")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 7;
	LSB_INDEX = 0;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("A[6]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "A";
}

SIGNAL("A[5]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "A";
}

SIGNAL("A[4]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "A";
}

SIGNAL("A[3]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "A";
}

SIGNAL("A[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "A";
}

SIGNAL("A[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "A";
}

SIGNAL("A[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "A";
}

SIGNAL("B")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 7;
	LSB_INDEX = 0;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("B[6]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "B";
}

SIGNAL("B[5]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "B";
}

SIGNAL("B[4]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "B";
}

SIGNAL("B[3]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "B";
}

SIGNAL("B[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "B";
}

SIGNAL("B[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "B";
}

SIGNAL("B[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "B";
}

SIGNAL("CLK")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "";
}

<<<<<<< HEAD
SIGNAL("EN")
=======
SIGNAL("CLR")
>>>>>>> origin/master
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "";
}

<<<<<<< HEAD
SIGNAL("result")
=======
SIGNAL("data")
>>>>>>> origin/master
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 8;
	LSB_INDEX = 0;
	DIRECTION = INPUT;
	PARENT = "";
}

<<<<<<< HEAD
SIGNAL("result[7]")
=======
SIGNAL("data[6]")
>>>>>>> origin/master
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
<<<<<<< HEAD
	DIRECTION = OUTPUT;
	PARENT = "result";
}

SIGNAL("result[6]")
=======
	DIRECTION = INPUT;
	PARENT = "data";
}

SIGNAL("data[5]")
>>>>>>> origin/master
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
<<<<<<< HEAD
	DIRECTION = OUTPUT;
	PARENT = "result";
}

SIGNAL("result[5]")
=======
	DIRECTION = INPUT;
	PARENT = "data";
}

SIGNAL("data[4]")
>>>>>>> origin/master
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
<<<<<<< HEAD
	DIRECTION = OUTPUT;
	PARENT = "result";
}

SIGNAL("result[4]")
=======
	DIRECTION = INPUT;
	PARENT = "data";
}

SIGNAL("data[3]")
>>>>>>> origin/master
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
<<<<<<< HEAD
	DIRECTION = OUTPUT;
	PARENT = "result";
}

SIGNAL("result[3]")
=======
	DIRECTION = INPUT;
	PARENT = "data";
}

SIGNAL("data[2]")
>>>>>>> origin/master
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
<<<<<<< HEAD
	DIRECTION = OUTPUT;
	PARENT = "result";
}

SIGNAL("result[2]")
=======
	DIRECTION = INPUT;
	PARENT = "data";
}

SIGNAL("data[1]")
>>>>>>> origin/master
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
<<<<<<< HEAD
	DIRECTION = OUTPUT;
	PARENT = "result";
}

SIGNAL("result[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "result";
}

SIGNAL("result[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "result";
}

SIGNAL("S")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 2;
	LSB_INDEX = 0;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("S[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "S";
=======
	DIRECTION = INPUT;
	PARENT = "data";
>>>>>>> origin/master
}

SIGNAL("data[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
<<<<<<< HEAD
	PARENT = "S";
}

SIGNAL("teste")
=======
	PARENT = "data";
}

SIGNAL("m0")
>>>>>>> origin/master
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("m1")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "";
}

TRANSITION_LIST("A[6]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
<<<<<<< HEAD
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 200.0;
			LEVEL 1 FOR 200.0;
			LEVEL 0 FOR 100.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 200.0;
			LEVEL 1 FOR 100.0;
=======
			LEVEL 0 FOR 100000.0;
>>>>>>> origin/master
		}
	}
}

TRANSITION_LIST("A[5]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
<<<<<<< HEAD
			LEVEL 1 FOR 500.0;
			LEVEL 0 FOR 100.0;
			LEVEL 1 FOR 200.0;
			LEVEL 0 FOR 200.0;
=======
			LEVEL 0 FOR 100000.0;
>>>>>>> origin/master
		}
	}
}

TRANSITION_LIST("A[4]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
<<<<<<< HEAD
			LEVEL 1 FOR 200.0;
			LEVEL 0 FOR 100.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 400.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 100.0;
=======
			LEVEL 0 FOR 100000.0;
>>>>>>> origin/master
		}
	}
}

TRANSITION_LIST("A[3]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
<<<<<<< HEAD
			LEVEL 0 FOR 100.0;
			LEVEL 1 FOR 200.0;
			LEVEL 0 FOR 100.0;
			LEVEL 1 FOR 200.0;
			LEVEL 0 FOR 100.0;
			LEVEL 1 FOR 300.0;
=======
			LEVEL 0 FOR 100000.0;
>>>>>>> origin/master
		}
	}
}

TRANSITION_LIST("A[2]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
<<<<<<< HEAD
			LEVEL 1 FOR 200.0;
			LEVEL 0 FOR 100.0;
			LEVEL 1 FOR 200.0;
			LEVEL 0 FOR 100.0;
			LEVEL 1 FOR 200.0;
			LEVEL 0 FOR 200.0;
=======
			LEVEL 0 FOR 100000.0;
>>>>>>> origin/master
		}
	}
}

TRANSITION_LIST("A[1]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
<<<<<<< HEAD
			LEVEL 0 FOR 100.0;
			LEVEL 1 FOR 200.0;
			LEVEL 0 FOR 300.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 100.0;
			LEVEL 1 FOR 200.0;
=======
			LEVEL 0 FOR 100000.0;
>>>>>>> origin/master
		}
	}
}

TRANSITION_LIST("A[0]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
<<<<<<< HEAD
			LEVEL 0 FOR 200.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 200.0;
			LEVEL 1 FOR 400.0;
			LEVEL 0 FOR 100.0;
=======
			LEVEL 0 FOR 100000.0;
>>>>>>> origin/master
		}
	}
}

TRANSITION_LIST("B[6]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
<<<<<<< HEAD
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 300.0;
			LEVEL 1 FOR 200.0;
			LEVEL 0 FOR 100.0;
			LEVEL 1 FOR 300.0;
=======
			LEVEL 0 FOR 12500.0;
			LEVEL 1 FOR 13100.0;
			LEVEL 0 FOR 2560.0;
			LEVEL 1 FOR 6400.0;
			LEVEL 0 FOR 65440.0;
>>>>>>> origin/master
		}
	}
}

TRANSITION_LIST("B[5]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
<<<<<<< HEAD
			LEVEL 0 FOR 100.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 100.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 400.0;
			LEVEL 1 FOR 200.0;
=======
			LEVEL 0 FOR 12500.0;
			LEVEL 1 FOR 13100.0;
			LEVEL 0 FOR 6900.0;
			LEVEL 1 FOR 2060.0;
			LEVEL 0 FOR 65440.0;
>>>>>>> origin/master
		}
	}
}

TRANSITION_LIST("B[4]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
<<<<<<< HEAD
			LEVEL 1 FOR 300.0;
			LEVEL 0 FOR 100.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 300.0;
			LEVEL 1 FOR 200.0;
=======
			LEVEL 0 FOR 12500.0;
			LEVEL 1 FOR 13100.0;
			LEVEL 0 FOR 2560.0;
			LEVEL 1 FOR 6400.0;
			LEVEL 0 FOR 65440.0;
>>>>>>> origin/master
		}
	}
}

TRANSITION_LIST("B[3]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
<<<<<<< HEAD
			LEVEL 1 FOR 500.0;
			LEVEL 0 FOR 400.0;
			LEVEL 1 FOR 100.0;
=======
			LEVEL 0 FOR 100000.0;
>>>>>>> origin/master
		}
	}
}

TRANSITION_LIST("B[2]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
<<<<<<< HEAD
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 100.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 200.0;
			LEVEL 1 FOR 300.0;
			LEVEL 0 FOR 100.0;
			LEVEL 1 FOR 100.0;
=======
			LEVEL 0 FOR 100000.0;
>>>>>>> origin/master
		}
	}
}

TRANSITION_LIST("B[1]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
<<<<<<< HEAD
			LEVEL 1 FOR 200.0;
			LEVEL 0 FOR 100.0;
			LEVEL 1 FOR 200.0;
			LEVEL 0 FOR 100.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 200.0;
			LEVEL 1 FOR 100.0;
=======
			LEVEL 0 FOR 12500.0;
			LEVEL 1 FOR 13100.0;
			LEVEL 0 FOR 6900.0;
			LEVEL 1 FOR 2060.0;
			LEVEL 0 FOR 65440.0;
>>>>>>> origin/master
		}
	}
}

TRANSITION_LIST("B[0]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
<<<<<<< HEAD
			LEVEL 1 FOR 200.0;
			LEVEL 0 FOR 100.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 100.0;
			LEVEL 1 FOR 200.0;
			LEVEL 0 FOR 200.0;
			LEVEL 1 FOR 100.0;
=======
			LEVEL 0 FOR 12500.0;
			LEVEL 1 FOR 13100.0;
			LEVEL 0 FOR 74400.0;
		}
	}
}

TRANSITION_LIST("CLK")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 2500.0;
			LEVEL 1 FOR 2500.0;
			LEVEL 0 FOR 2500.0;
			LEVEL 1 FOR 2500.0;
			LEVEL 0 FOR 2500.0;
			LEVEL 1 FOR 2500.0;
			LEVEL 0 FOR 2500.0;
			LEVEL 1 FOR 2500.0;
			LEVEL 0 FOR 2500.0;
			LEVEL 1 FOR 2500.0;
			LEVEL 0 FOR 2500.0;
			LEVEL 1 FOR 2500.0;
			LEVEL 0 FOR 2500.0;
			LEVEL 1 FOR 2500.0;
			LEVEL 0 FOR 2500.0;
			LEVEL 1 FOR 2500.0;
			LEVEL 0 FOR 2500.0;
			LEVEL 1 FOR 2500.0;
			LEVEL 0 FOR 2500.0;
			LEVEL 1 FOR 2500.0;
			LEVEL 0 FOR 2500.0;
			LEVEL 1 FOR 2500.0;
			LEVEL 0 FOR 2500.0;
			LEVEL 1 FOR 2500.0;
			LEVEL 0 FOR 2500.0;
			LEVEL 1 FOR 2500.0;
			LEVEL 0 FOR 2500.0;
			LEVEL 1 FOR 2500.0;
			LEVEL 0 FOR 2500.0;
			LEVEL 1 FOR 2500.0;
			LEVEL 0 FOR 2500.0;
			LEVEL 1 FOR 2500.0;
			LEVEL 0 FOR 2500.0;
			LEVEL 1 FOR 2500.0;
			LEVEL 0 FOR 2500.0;
			LEVEL 1 FOR 2500.0;
			LEVEL 0 FOR 2500.0;
			LEVEL 1 FOR 2500.0;
			LEVEL 0 FOR 2500.0;
			LEVEL 1 FOR 2500.0;
		}
	}
}

TRANSITION_LIST("CLR")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 25600.0;
			LEVEL 1 FOR 1280.0;
			LEVEL 0 FOR 7680.0;
			LEVEL 1 FOR 17920.0;
			LEVEL 0 FOR 47520.0;
>>>>>>> origin/master
		}
	}
}

<<<<<<< HEAD
TRANSITION_LIST("CLK")
=======
TRANSITION_LIST("data[6]")
>>>>>>> origin/master
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
<<<<<<< HEAD
			LEVEL 0 FOR 12.5;
			LEVEL 1 FOR 12.5;
			LEVEL 0 FOR 12.5;
			LEVEL 1 FOR 12.5;
			LEVEL 0 FOR 12.5;
			LEVEL 1 FOR 12.5;
			LEVEL 0 FOR 12.5;
			LEVEL 1 FOR 12.5;
			LEVEL 0 FOR 12.5;
			LEVEL 1 FOR 12.5;
			LEVEL 0 FOR 12.5;
			LEVEL 1 FOR 12.5;
			LEVEL 0 FOR 12.5;
			LEVEL 1 FOR 12.5;
			LEVEL 0 FOR 12.5;
			LEVEL 1 FOR 12.5;
			LEVEL 0 FOR 12.5;
			LEVEL 1 FOR 12.5;
			LEVEL 0 FOR 12.5;
			LEVEL 1 FOR 12.5;
			LEVEL 0 FOR 12.5;
			LEVEL 1 FOR 12.5;
			LEVEL 0 FOR 12.5;
			LEVEL 1 FOR 12.5;
			LEVEL 0 FOR 12.5;
			LEVEL 1 FOR 12.5;
			LEVEL 0 FOR 12.5;
			LEVEL 1 FOR 12.5;
			LEVEL 0 FOR 12.5;
			LEVEL 1 FOR 12.5;
			LEVEL 0 FOR 12.5;
			LEVEL 1 FOR 12.5;
			LEVEL 0 FOR 12.5;
			LEVEL 1 FOR 12.5;
			LEVEL 0 FOR 12.5;
			LEVEL 1 FOR 12.5;
			LEVEL 0 FOR 12.5;
			LEVEL 1 FOR 12.5;
			LEVEL 0 FOR 12.5;
			LEVEL 1 FOR 12.5;
			LEVEL 0 FOR 12.5;
			LEVEL 1 FOR 12.5;
			LEVEL 0 FOR 12.5;
			LEVEL 1 FOR 12.5;
			LEVEL 0 FOR 12.5;
			LEVEL 1 FOR 12.5;
			LEVEL 0 FOR 12.5;
			LEVEL 1 FOR 12.5;
			LEVEL 0 FOR 12.5;
			LEVEL 1 FOR 12.5;
			LEVEL 0 FOR 12.5;
			LEVEL 1 FOR 12.5;
			LEVEL 0 FOR 12.5;
			LEVEL 1 FOR 12.5;
			LEVEL 0 FOR 12.5;
			LEVEL 1 FOR 12.5;
			LEVEL 0 FOR 12.5;
			LEVEL 1 FOR 12.5;
			LEVEL 0 FOR 12.5;
			LEVEL 1 FOR 12.5;
			LEVEL 0 FOR 12.5;
			LEVEL 1 FOR 12.5;
			LEVEL 0 FOR 12.5;
			LEVEL 1 FOR 12.5;
			LEVEL 0 FOR 12.5;
			LEVEL 1 FOR 12.5;
			LEVEL 0 FOR 12.5;
			LEVEL 1 FOR 12.5;
			LEVEL 0 FOR 12.5;
			LEVEL 1 FOR 12.5;
			LEVEL 0 FOR 12.5;
			LEVEL 1 FOR 12.5;
			LEVEL 0 FOR 12.5;
			LEVEL 1 FOR 12.5;
			LEVEL 0 FOR 12.5;
			LEVEL 1 FOR 12.5;
			LEVEL 0 FOR 12.5;
			LEVEL 1 FOR 12.5;
			LEVEL 0 FOR 12.5;
			LEVEL 1 FOR 12.5;
=======
			LEVEL 1 FOR 20000.0;
			LEVEL 0 FOR 5000.0;
			LEVEL 1 FOR 10000.0;
			LEVEL 0 FOR 25000.0;
			LEVEL 1 FOR 5000.0;
			LEVEL 0 FOR 10000.0;
			LEVEL 1 FOR 5000.0;
			LEVEL 0 FOR 5000.0;
			LEVEL 1 FOR 10000.0;
			LEVEL 0 FOR 5000.0;
>>>>>>> origin/master
		}
	}
}

<<<<<<< HEAD
TRANSITION_LIST("EN")
=======
TRANSITION_LIST("data[5]")
>>>>>>> origin/master
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
<<<<<<< HEAD
			LEVEL 1 FOR 400.0;
			LEVEL 0 FOR 600.0;
=======
			LEVEL 1 FOR 5000.0;
			LEVEL 0 FOR 5000.0;
			LEVEL 1 FOR 10000.0;
			LEVEL 0 FOR 10000.0;
			LEVEL 1 FOR 10000.0;
			LEVEL 0 FOR 20000.0;
			LEVEL 1 FOR 10000.0;
			LEVEL 0 FOR 5000.0;
			LEVEL 1 FOR 5000.0;
			LEVEL 0 FOR 5000.0;
			LEVEL 1 FOR 5000.0;
			LEVEL 0 FOR 10000.0;
>>>>>>> origin/master
		}
	}
}

<<<<<<< HEAD
TRANSITION_LIST("result[7]")
=======
TRANSITION_LIST("data[4]")
>>>>>>> origin/master
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
<<<<<<< HEAD
			LEVEL 0 FOR 312.5;
			LEVEL 1 FOR 687.5;
=======
			LEVEL 1 FOR 5000.0;
			LEVEL 0 FOR 5000.0;
			LEVEL 1 FOR 5000.0;
			LEVEL 0 FOR 10000.0;
			LEVEL 1 FOR 10000.0;
			LEVEL 0 FOR 15000.0;
			LEVEL 1 FOR 5000.0;
			LEVEL 0 FOR 5000.0;
			LEVEL 1 FOR 5000.0;
			LEVEL 0 FOR 10000.0;
			LEVEL 1 FOR 5000.0;
			LEVEL 0 FOR 10000.0;
			LEVEL 1 FOR 5000.0;
			LEVEL 0 FOR 5000.0;
>>>>>>> origin/master
		}
	}
}

<<<<<<< HEAD
TRANSITION_LIST("result[6]")
=======
TRANSITION_LIST("data[3]")
>>>>>>> origin/master
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
<<<<<<< HEAD
			LEVEL 0 FOR 312.5;
			LEVEL 1 FOR 687.5;
=======
			LEVEL 0 FOR 35000.0;
			LEVEL 1 FOR 20000.0;
			LEVEL 0 FOR 20000.0;
			LEVEL 1 FOR 5000.0;
			LEVEL 0 FOR 5000.0;
			LEVEL 1 FOR 15000.0;
>>>>>>> origin/master
		}
	}
}

<<<<<<< HEAD
TRANSITION_LIST("result[5]")
=======
TRANSITION_LIST("data[2]")
>>>>>>> origin/master
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
<<<<<<< HEAD
			LEVEL 0 FOR 12.5;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 200.0;
			LEVEL 1 FOR 687.5;
		}
	}
}

TRANSITION_LIST("result[4]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 212.5;
			LEVEL 1 FOR 787.5;
		}
	}
}

TRANSITION_LIST("result[3]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 12.5;
			LEVEL 1 FOR 200.0;
			LEVEL 0 FOR 100.0;
			LEVEL 1 FOR 687.5;
		}
	}
}

TRANSITION_LIST("result[2]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 312.5;
			LEVEL 1 FOR 687.5;
		}
	}
}

TRANSITION_LIST("result[1]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 112.5;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 100.0;
			LEVEL 1 FOR 687.5;
		}
	}
}

TRANSITION_LIST("result[0]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 12.5;
			LEVEL 1 FOR 200.0;
			LEVEL 0 FOR 787.5;
=======
			LEVEL 1 FOR 10000.0;
			LEVEL 0 FOR 10000.0;
			LEVEL 1 FOR 5000.0;
			LEVEL 0 FOR 20000.0;
			LEVEL 1 FOR 10000.0;
			LEVEL 0 FOR 15000.0;
			LEVEL 1 FOR 15000.0;
			LEVEL 0 FOR 15000.0;
>>>>>>> origin/master
		}
	}
}

TRANSITION_LIST("data[1]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
<<<<<<< HEAD
			LEVEL 0 FOR 100.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 100.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 600.0;
=======
			LEVEL 1 FOR 20000.0;
			LEVEL 0 FOR 10000.0;
			LEVEL 1 FOR 5000.0;
			LEVEL 0 FOR 5000.0;
			LEVEL 1 FOR 5000.0;
			LEVEL 0 FOR 5000.0;
			LEVEL 1 FOR 10000.0;
			LEVEL 0 FOR 15000.0;
			LEVEL 1 FOR 10000.0;
			LEVEL 0 FOR 5000.0;
			LEVEL 1 FOR 10000.0;
>>>>>>> origin/master
		}
	}
}

TRANSITION_LIST("data[0]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
<<<<<<< HEAD
			LEVEL 0 FOR 200.0;
			LEVEL 1 FOR 200.0;
			LEVEL 0 FOR 600.0;
=======
			LEVEL 1 FOR 5000.0;
			LEVEL 0 FOR 5000.0;
			LEVEL 1 FOR 5000.0;
			LEVEL 0 FOR 5000.0;
			LEVEL 1 FOR 5000.0;
			LEVEL 0 FOR 20000.0;
			LEVEL 1 FOR 25000.0;
			LEVEL 0 FOR 5000.0;
			LEVEL 1 FOR 5000.0;
			LEVEL 0 FOR 15000.0;
			LEVEL 1 FOR 5000.0;
>>>>>>> origin/master
		}
	}
}

<<<<<<< HEAD
TRANSITION_LIST("teste")
=======
TRANSITION_LIST("m0")
>>>>>>> origin/master
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
<<<<<<< HEAD
			LEVEL 0 FOR 12.5;
			LEVEL 1 FOR 25.0;
			LEVEL 0 FOR 25.0;
			LEVEL 1 FOR 25.0;
			LEVEL 0 FOR 25.0;
			LEVEL 1 FOR 25.0;
			LEVEL 0 FOR 25.0;
			LEVEL 1 FOR 25.0;
			LEVEL 0 FOR 25.0;
			LEVEL 1 FOR 25.0;
			LEVEL 0 FOR 25.0;
			LEVEL 1 FOR 25.0;
			LEVEL 0 FOR 25.0;
			LEVEL 1 FOR 25.0;
			LEVEL 0 FOR 25.0;
			LEVEL 1 FOR 25.0;
			LEVEL 0 FOR 25.0;
			LEVEL 1 FOR 25.0;
			LEVEL 0 FOR 25.0;
			LEVEL 1 FOR 25.0;
			LEVEL 0 FOR 25.0;
			LEVEL 1 FOR 25.0;
			LEVEL 0 FOR 25.0;
			LEVEL 1 FOR 25.0;
			LEVEL 0 FOR 25.0;
			LEVEL 1 FOR 25.0;
			LEVEL 0 FOR 25.0;
			LEVEL 1 FOR 25.0;
			LEVEL 0 FOR 25.0;
			LEVEL 1 FOR 25.0;
			LEVEL 0 FOR 25.0;
			LEVEL 1 FOR 25.0;
			LEVEL 0 FOR 25.0;
			LEVEL 1 FOR 25.0;
			LEVEL 0 FOR 25.0;
			LEVEL 1 FOR 25.0;
			LEVEL 0 FOR 25.0;
			LEVEL 1 FOR 25.0;
			LEVEL 0 FOR 25.0;
			LEVEL 1 FOR 25.0;
			LEVEL 0 FOR 12.5;
=======
			LEVEL 1 FOR 10000.0;
			LEVEL 0 FOR 15000.0;
			LEVEL 1 FOR 3160.0;
			LEVEL 0 FOR 11840.0;
			LEVEL 1 FOR 5000.0;
			LEVEL 0 FOR 10000.0;
			LEVEL 1 FOR 5000.0;
			LEVEL 0 FOR 30000.0;
			LEVEL 1 FOR 10000.0;
		}
	}
}

TRANSITION_LIST("m1")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 1 FOR 14080.0;
			LEVEL 0 FOR 10920.0;
			LEVEL 1 FOR 8280.0;
			LEVEL 0 FOR 6720.0;
			LEVEL 1 FOR 5000.0;
			LEVEL 0 FOR 10000.0;
			LEVEL 1 FOR 5000.0;
			LEVEL 0 FOR 30000.0;
			LEVEL 1 FOR 10000.0;
>>>>>>> origin/master
		}
	}
}

DISPLAY_LINE
{
	CHANNEL = "CLK";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 0;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
<<<<<<< HEAD
	CHANNEL = "A";
=======
	CHANNEL = "data";
>>>>>>> origin/master
	EXPAND_STATUS = COLLAPSED;
	RADIX = Unsigned;
	TREE_INDEX = 1;
	TREE_LEVEL = 0;
	CHILDREN = 2, 3, 4, 5, 6, 7, 8;
}

DISPLAY_LINE
{
<<<<<<< HEAD
	CHANNEL = "A[0]";
=======
	CHANNEL = "data[0]";
>>>>>>> origin/master
	EXPAND_STATUS = COLLAPSED;
	RADIX = Unsigned;
	TREE_INDEX = 2;
	TREE_LEVEL = 1;
	PARENT = 1;
}

DISPLAY_LINE
{
<<<<<<< HEAD
	CHANNEL = "A[1]";
=======
	CHANNEL = "data[1]";
>>>>>>> origin/master
	EXPAND_STATUS = COLLAPSED;
	RADIX = Unsigned;
	TREE_INDEX = 3;
	TREE_LEVEL = 1;
	PARENT = 1;
}

DISPLAY_LINE
{
<<<<<<< HEAD
	CHANNEL = "A[2]";
=======
	CHANNEL = "data[2]";
>>>>>>> origin/master
	EXPAND_STATUS = COLLAPSED;
	RADIX = Unsigned;
	TREE_INDEX = 4;
	TREE_LEVEL = 1;
	PARENT = 1;
}

DISPLAY_LINE
{
<<<<<<< HEAD
	CHANNEL = "A[3]";
=======
	CHANNEL = "data[3]";
>>>>>>> origin/master
	EXPAND_STATUS = COLLAPSED;
	RADIX = Unsigned;
	TREE_INDEX = 5;
	TREE_LEVEL = 1;
	PARENT = 1;
}

DISPLAY_LINE
{
<<<<<<< HEAD
	CHANNEL = "A[4]";
=======
	CHANNEL = "data[4]";
>>>>>>> origin/master
	EXPAND_STATUS = COLLAPSED;
	RADIX = Unsigned;
	TREE_INDEX = 6;
	TREE_LEVEL = 1;
	PARENT = 1;
}

DISPLAY_LINE
{
<<<<<<< HEAD
	CHANNEL = "A[5]";
=======
	CHANNEL = "data[5]";
>>>>>>> origin/master
	EXPAND_STATUS = COLLAPSED;
	RADIX = Unsigned;
	TREE_INDEX = 7;
	TREE_LEVEL = 1;
	PARENT = 1;
}

DISPLAY_LINE
{
<<<<<<< HEAD
	CHANNEL = "A[6]";
=======
	CHANNEL = "data[6]";
>>>>>>> origin/master
	EXPAND_STATUS = COLLAPSED;
	RADIX = Unsigned;
	TREE_INDEX = 8;
	TREE_LEVEL = 1;
	PARENT = 1;
}

DISPLAY_LINE
{
<<<<<<< HEAD
	CHANNEL = "B";
=======
	CHANNEL = "CLR";
>>>>>>> origin/master
	EXPAND_STATUS = COLLAPSED;
	RADIX = Unsigned;
	TREE_INDEX = 9;
	TREE_LEVEL = 0;
<<<<<<< HEAD
	CHILDREN = 10, 11, 12, 13, 14, 15, 16;
=======
>>>>>>> origin/master
}

DISPLAY_LINE
{
<<<<<<< HEAD
	CHANNEL = "B[0]";
=======
	CHANNEL = "m0";
>>>>>>> origin/master
	EXPAND_STATUS = COLLAPSED;
	RADIX = Unsigned;
	TREE_INDEX = 10;
<<<<<<< HEAD
	TREE_LEVEL = 1;
	PARENT = 9;
=======
	TREE_LEVEL = 0;
>>>>>>> origin/master
}

DISPLAY_LINE
{
<<<<<<< HEAD
	CHANNEL = "B[1]";
=======
	CHANNEL = "m1";
>>>>>>> origin/master
	EXPAND_STATUS = COLLAPSED;
	RADIX = Unsigned;
	TREE_INDEX = 11;
<<<<<<< HEAD
	TREE_LEVEL = 1;
	PARENT = 9;
=======
	TREE_LEVEL = 0;
>>>>>>> origin/master
}

DISPLAY_LINE
{
<<<<<<< HEAD
	CHANNEL = "B[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Unsigned;
	TREE_INDEX = 12;
	TREE_LEVEL = 1;
	PARENT = 9;
=======
	CHANNEL = "A";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Unsigned;
	TREE_INDEX = 12;
	TREE_LEVEL = 0;
	CHILDREN = 13, 14, 15, 16, 17, 18, 19;
>>>>>>> origin/master
}

DISPLAY_LINE
{
<<<<<<< HEAD
	CHANNEL = "B[3]";
=======
	CHANNEL = "A[0]";
>>>>>>> origin/master
	EXPAND_STATUS = COLLAPSED;
	RADIX = Unsigned;
	TREE_INDEX = 13;
	TREE_LEVEL = 1;
<<<<<<< HEAD
	PARENT = 9;
=======
	PARENT = 12;
>>>>>>> origin/master
}

DISPLAY_LINE
{
<<<<<<< HEAD
	CHANNEL = "B[4]";
=======
	CHANNEL = "A[1]";
>>>>>>> origin/master
	EXPAND_STATUS = COLLAPSED;
	RADIX = Unsigned;
	TREE_INDEX = 14;
	TREE_LEVEL = 1;
<<<<<<< HEAD
	PARENT = 9;
=======
	PARENT = 12;
>>>>>>> origin/master
}

DISPLAY_LINE
{
<<<<<<< HEAD
	CHANNEL = "B[5]";
=======
	CHANNEL = "A[2]";
>>>>>>> origin/master
	EXPAND_STATUS = COLLAPSED;
	RADIX = Unsigned;
	TREE_INDEX = 15;
	TREE_LEVEL = 1;
<<<<<<< HEAD
	PARENT = 9;
=======
	PARENT = 12;
>>>>>>> origin/master
}

DISPLAY_LINE
{
<<<<<<< HEAD
	CHANNEL = "B[6]";
=======
	CHANNEL = "A[3]";
>>>>>>> origin/master
	EXPAND_STATUS = COLLAPSED;
	RADIX = Unsigned;
	TREE_INDEX = 16;
	TREE_LEVEL = 1;
<<<<<<< HEAD
	PARENT = 9;
=======
	PARENT = 12;
>>>>>>> origin/master
}

DISPLAY_LINE
{
<<<<<<< HEAD
	CHANNEL = "EN";
=======
	CHANNEL = "A[4]";
>>>>>>> origin/master
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 17;
<<<<<<< HEAD
	TREE_LEVEL = 0;
=======
	TREE_LEVEL = 1;
	PARENT = 12;
>>>>>>> origin/master
}

DISPLAY_LINE
{
<<<<<<< HEAD
	CHANNEL = "result";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Unsigned;
	TREE_INDEX = 18;
	TREE_LEVEL = 0;
	CHILDREN = 19, 20, 21, 22, 23, 24, 25, 26;
=======
	CHANNEL = "A[5]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Unsigned;
	TREE_INDEX = 18;
	TREE_LEVEL = 1;
	PARENT = 12;
>>>>>>> origin/master
}

DISPLAY_LINE
{
<<<<<<< HEAD
	CHANNEL = "result[0]";
=======
	CHANNEL = "A[6]";
>>>>>>> origin/master
	EXPAND_STATUS = COLLAPSED;
	RADIX = Unsigned;
	TREE_INDEX = 19;
	TREE_LEVEL = 1;
<<<<<<< HEAD
	PARENT = 18;
=======
	PARENT = 12;
>>>>>>> origin/master
}

DISPLAY_LINE
{
<<<<<<< HEAD
	CHANNEL = "result[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Unsigned;
	TREE_INDEX = 20;
	TREE_LEVEL = 1;
	PARENT = 18;
=======
	CHANNEL = "B";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Unsigned;
	TREE_INDEX = 20;
	TREE_LEVEL = 0;
	CHILDREN = 21, 22, 23, 24, 25, 26, 27;
>>>>>>> origin/master
}

DISPLAY_LINE
{
<<<<<<< HEAD
	CHANNEL = "result[2]";
=======
	CHANNEL = "B[0]";
>>>>>>> origin/master
	EXPAND_STATUS = COLLAPSED;
	RADIX = Unsigned;
	TREE_INDEX = 21;
	TREE_LEVEL = 1;
<<<<<<< HEAD
	PARENT = 18;
=======
	PARENT = 20;
>>>>>>> origin/master
}

DISPLAY_LINE
{
<<<<<<< HEAD
	CHANNEL = "result[3]";
=======
	CHANNEL = "B[1]";
>>>>>>> origin/master
	EXPAND_STATUS = COLLAPSED;
	RADIX = Unsigned;
	TREE_INDEX = 22;
	TREE_LEVEL = 1;
<<<<<<< HEAD
	PARENT = 18;
=======
	PARENT = 20;
>>>>>>> origin/master
}

DISPLAY_LINE
{
<<<<<<< HEAD
	CHANNEL = "result[4]";
=======
	CHANNEL = "B[2]";
>>>>>>> origin/master
	EXPAND_STATUS = COLLAPSED;
	RADIX = Unsigned;
	TREE_INDEX = 23;
	TREE_LEVEL = 1;
<<<<<<< HEAD
	PARENT = 18;
=======
	PARENT = 20;
>>>>>>> origin/master
}

DISPLAY_LINE
{
<<<<<<< HEAD
	CHANNEL = "result[5]";
=======
	CHANNEL = "B[3]";
>>>>>>> origin/master
	EXPAND_STATUS = COLLAPSED;
	RADIX = Unsigned;
	TREE_INDEX = 24;
	TREE_LEVEL = 1;
<<<<<<< HEAD
	PARENT = 18;
=======
	PARENT = 20;
>>>>>>> origin/master
}

DISPLAY_LINE
{
<<<<<<< HEAD
	CHANNEL = "result[6]";
=======
	CHANNEL = "B[4]";
>>>>>>> origin/master
	EXPAND_STATUS = COLLAPSED;
	RADIX = Unsigned;
	TREE_INDEX = 25;
	TREE_LEVEL = 1;
<<<<<<< HEAD
	PARENT = 18;
=======
	PARENT = 20;
>>>>>>> origin/master
}

DISPLAY_LINE
{
<<<<<<< HEAD
	CHANNEL = "result[7]";
=======
	CHANNEL = "B[5]";
>>>>>>> origin/master
	EXPAND_STATUS = COLLAPSED;
	RADIX = Unsigned;
	TREE_INDEX = 26;
	TREE_LEVEL = 1;
<<<<<<< HEAD
	PARENT = 18;
=======
	PARENT = 20;
>>>>>>> origin/master
}

DISPLAY_LINE
{
<<<<<<< HEAD
	CHANNEL = "S";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 27;
	TREE_LEVEL = 0;
	CHILDREN = 28, 29;
}

DISPLAY_LINE
{
	CHANNEL = "S[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 28;
	TREE_LEVEL = 1;
	PARENT = 27;
}

DISPLAY_LINE
{
	CHANNEL = "S[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 29;
	TREE_LEVEL = 1;
	PARENT = 27;
}

DISPLAY_LINE
{
	CHANNEL = "teste";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 30;
	TREE_LEVEL = 0;
=======
	CHANNEL = "B[6]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Unsigned;
	TREE_INDEX = 27;
	TREE_LEVEL = 1;
	PARENT = 20;
>>>>>>> origin/master
}

TIME_BAR
{
	TIME = 0;
	MASTER = TRUE;
}
;
