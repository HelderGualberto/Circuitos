// Copyright (C) 1991-2014 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/09/2014 19:38:12"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    decoder
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module decoder_vlg_sample_tst(
	data,
	sampler_tx
);
input [0:7] data;
output sampler_tx;

reg sample;
time current_time;
always @(data)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module decoder_vlg_check_tst (
	H1,
	H2,
	H3,
	sampler_rx
);
input [0:6] H1;
input [0:6] H2;
input [0:6] H3;
input sampler_rx;

reg [0:6] H1_expected;
reg [0:6] H2_expected;
reg [0:6] H3_expected;

reg [0:6] H1_prev;
reg [0:6] H2_prev;
reg [0:6] H3_prev;

reg [0:6] H1_expected_prev;
reg [0:6] H2_expected_prev;
reg [0:6] H3_expected_prev;

reg [0:6] last_H1_exp;
reg [0:6] last_H2_exp;
reg [0:6] last_H3_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	H1_prev = H1;
	H2_prev = H2;
	H3_prev = H3;
end

// update expected /o prevs

always @(trigger)
begin
	H1_expected_prev = H1_expected;
	H2_expected_prev = H2_expected;
	H3_expected_prev = H3_expected;
end


// expected H1[ 6 ]
initial
begin
	H1_expected[6] = 1'bX;
end 
// expected H1[ 5 ]
initial
begin
	H1_expected[5] = 1'bX;
end 
// expected H1[ 4 ]
initial
begin
	H1_expected[4] = 1'bX;
end 
// expected H1[ 3 ]
initial
begin
	H1_expected[3] = 1'bX;
end 
// expected H1[ 2 ]
initial
begin
	H1_expected[2] = 1'bX;
end 
// expected H1[ 1 ]
initial
begin
	H1_expected[1] = 1'bX;
end 
// expected H1[ 0 ]
initial
begin
	H1_expected[0] = 1'bX;
end 
// expected H2[ 6 ]
initial
begin
	H2_expected[6] = 1'bX;
end 
// expected H2[ 5 ]
initial
begin
	H2_expected[5] = 1'bX;
end 
// expected H2[ 4 ]
initial
begin
	H2_expected[4] = 1'bX;
end 
// expected H2[ 3 ]
initial
begin
	H2_expected[3] = 1'bX;
end 
// expected H2[ 2 ]
initial
begin
	H2_expected[2] = 1'bX;
end 
// expected H2[ 1 ]
initial
begin
	H2_expected[1] = 1'bX;
end 
// expected H2[ 0 ]
initial
begin
	H2_expected[0] = 1'bX;
end 
// expected H3[ 6 ]
initial
begin
	H3_expected[6] = 1'bX;
end 
// expected H3[ 5 ]
initial
begin
	H3_expected[5] = 1'bX;
end 
// expected H3[ 4 ]
initial
begin
	H3_expected[4] = 1'bX;
end 
// expected H3[ 3 ]
initial
begin
	H3_expected[3] = 1'bX;
end 
// expected H3[ 2 ]
initial
begin
	H3_expected[2] = 1'bX;
end 
// expected H3[ 1 ]
initial
begin
	H3_expected[1] = 1'bX;
end 
// expected H3[ 0 ]
initial
begin
	H3_expected[0] = 1'bX;
end 
// generate trigger
always @(H1_expected or H1 or H2_expected or H2 or H3_expected or H3)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected H1 = %b | expected H2 = %b | expected H3 = %b | ",H1_expected_prev,H2_expected_prev,H3_expected_prev);
	$display("| real H1 = %b | real H2 = %b | real H3 = %b | ",H1_prev,H2_prev,H3_prev);
`endif
	if (
		( H1_expected_prev[0] !== 1'bx ) && ( H1_prev[0] !== H1_expected_prev[0] )
		&& ((H1_expected_prev[0] !== last_H1_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port H1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", H1_expected_prev);
		$display ("     Real value = %b", H1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_H1_exp[0] = H1_expected_prev[0];
	end
	if (
		( H1_expected_prev[1] !== 1'bx ) && ( H1_prev[1] !== H1_expected_prev[1] )
		&& ((H1_expected_prev[1] !== last_H1_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port H1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", H1_expected_prev);
		$display ("     Real value = %b", H1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_H1_exp[1] = H1_expected_prev[1];
	end
	if (
		( H1_expected_prev[2] !== 1'bx ) && ( H1_prev[2] !== H1_expected_prev[2] )
		&& ((H1_expected_prev[2] !== last_H1_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port H1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", H1_expected_prev);
		$display ("     Real value = %b", H1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_H1_exp[2] = H1_expected_prev[2];
	end
	if (
		( H1_expected_prev[3] !== 1'bx ) && ( H1_prev[3] !== H1_expected_prev[3] )
		&& ((H1_expected_prev[3] !== last_H1_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port H1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", H1_expected_prev);
		$display ("     Real value = %b", H1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_H1_exp[3] = H1_expected_prev[3];
	end
	if (
		( H1_expected_prev[4] !== 1'bx ) && ( H1_prev[4] !== H1_expected_prev[4] )
		&& ((H1_expected_prev[4] !== last_H1_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port H1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", H1_expected_prev);
		$display ("     Real value = %b", H1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_H1_exp[4] = H1_expected_prev[4];
	end
	if (
		( H1_expected_prev[5] !== 1'bx ) && ( H1_prev[5] !== H1_expected_prev[5] )
		&& ((H1_expected_prev[5] !== last_H1_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port H1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", H1_expected_prev);
		$display ("     Real value = %b", H1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_H1_exp[5] = H1_expected_prev[5];
	end
	if (
		( H1_expected_prev[6] !== 1'bx ) && ( H1_prev[6] !== H1_expected_prev[6] )
		&& ((H1_expected_prev[6] !== last_H1_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port H1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", H1_expected_prev);
		$display ("     Real value = %b", H1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_H1_exp[6] = H1_expected_prev[6];
	end
	if (
		( H2_expected_prev[0] !== 1'bx ) && ( H2_prev[0] !== H2_expected_prev[0] )
		&& ((H2_expected_prev[0] !== last_H2_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port H2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", H2_expected_prev);
		$display ("     Real value = %b", H2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_H2_exp[0] = H2_expected_prev[0];
	end
	if (
		( H2_expected_prev[1] !== 1'bx ) && ( H2_prev[1] !== H2_expected_prev[1] )
		&& ((H2_expected_prev[1] !== last_H2_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port H2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", H2_expected_prev);
		$display ("     Real value = %b", H2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_H2_exp[1] = H2_expected_prev[1];
	end
	if (
		( H2_expected_prev[2] !== 1'bx ) && ( H2_prev[2] !== H2_expected_prev[2] )
		&& ((H2_expected_prev[2] !== last_H2_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port H2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", H2_expected_prev);
		$display ("     Real value = %b", H2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_H2_exp[2] = H2_expected_prev[2];
	end
	if (
		( H2_expected_prev[3] !== 1'bx ) && ( H2_prev[3] !== H2_expected_prev[3] )
		&& ((H2_expected_prev[3] !== last_H2_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port H2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", H2_expected_prev);
		$display ("     Real value = %b", H2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_H2_exp[3] = H2_expected_prev[3];
	end
	if (
		( H2_expected_prev[4] !== 1'bx ) && ( H2_prev[4] !== H2_expected_prev[4] )
		&& ((H2_expected_prev[4] !== last_H2_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port H2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", H2_expected_prev);
		$display ("     Real value = %b", H2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_H2_exp[4] = H2_expected_prev[4];
	end
	if (
		( H2_expected_prev[5] !== 1'bx ) && ( H2_prev[5] !== H2_expected_prev[5] )
		&& ((H2_expected_prev[5] !== last_H2_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port H2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", H2_expected_prev);
		$display ("     Real value = %b", H2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_H2_exp[5] = H2_expected_prev[5];
	end
	if (
		( H2_expected_prev[6] !== 1'bx ) && ( H2_prev[6] !== H2_expected_prev[6] )
		&& ((H2_expected_prev[6] !== last_H2_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port H2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", H2_expected_prev);
		$display ("     Real value = %b", H2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_H2_exp[6] = H2_expected_prev[6];
	end
	if (
		( H3_expected_prev[0] !== 1'bx ) && ( H3_prev[0] !== H3_expected_prev[0] )
		&& ((H3_expected_prev[0] !== last_H3_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port H3[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", H3_expected_prev);
		$display ("     Real value = %b", H3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_H3_exp[0] = H3_expected_prev[0];
	end
	if (
		( H3_expected_prev[1] !== 1'bx ) && ( H3_prev[1] !== H3_expected_prev[1] )
		&& ((H3_expected_prev[1] !== last_H3_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port H3[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", H3_expected_prev);
		$display ("     Real value = %b", H3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_H3_exp[1] = H3_expected_prev[1];
	end
	if (
		( H3_expected_prev[2] !== 1'bx ) && ( H3_prev[2] !== H3_expected_prev[2] )
		&& ((H3_expected_prev[2] !== last_H3_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port H3[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", H3_expected_prev);
		$display ("     Real value = %b", H3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_H3_exp[2] = H3_expected_prev[2];
	end
	if (
		( H3_expected_prev[3] !== 1'bx ) && ( H3_prev[3] !== H3_expected_prev[3] )
		&& ((H3_expected_prev[3] !== last_H3_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port H3[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", H3_expected_prev);
		$display ("     Real value = %b", H3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_H3_exp[3] = H3_expected_prev[3];
	end
	if (
		( H3_expected_prev[4] !== 1'bx ) && ( H3_prev[4] !== H3_expected_prev[4] )
		&& ((H3_expected_prev[4] !== last_H3_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port H3[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", H3_expected_prev);
		$display ("     Real value = %b", H3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_H3_exp[4] = H3_expected_prev[4];
	end
	if (
		( H3_expected_prev[5] !== 1'bx ) && ( H3_prev[5] !== H3_expected_prev[5] )
		&& ((H3_expected_prev[5] !== last_H3_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port H3[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", H3_expected_prev);
		$display ("     Real value = %b", H3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_H3_exp[5] = H3_expected_prev[5];
	end
	if (
		( H3_expected_prev[6] !== 1'bx ) && ( H3_prev[6] !== H3_expected_prev[6] )
		&& ((H3_expected_prev[6] !== last_H3_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port H3[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", H3_expected_prev);
		$display ("     Real value = %b", H3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_H3_exp[6] = H3_expected_prev[6];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#100000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module decoder_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [0:7] data;
// wires                                               
wire [0:6] H1;
wire [0:6] H2;
wire [0:6] H3;

wire sampler;                             

// assign statements (if any)                          
decoder i1 (
// port map - connection between master ports and signals/registers   
	.data(data),
	.H1(H1),
	.H2(H2),
	.H3(H3)
);
// data[ 7 ]
initial
begin
	data[7] = 1'b1;
	data[7] = #10000000 1'b0;
	data[7] = #5000000 1'b1;
	data[7] = #15000000 1'b0;
	data[7] = #5000000 1'b1;
	data[7] = #15000000 1'b0;
	data[7] = #10000000 1'b1;
	data[7] = #10000000 1'b0;
	data[7] = #5000000 1'b1;
	data[7] = #5000000 1'b0;
end 
// data[ 6 ]
initial
begin
	data[6] = 1'b0;
	data[6] = #5000000 1'b1;
	data[6] = #10000000 1'b0;
	data[6] = #5000000 1'b1;
	data[6] = #5000000 1'b0;
	data[6] = #5000000 1'b1;
	data[6] = #10000000 1'b0;
	data[6] = #5000000 1'b1;
	data[6] = #5000000 1'b0;
	data[6] = #30000000 1'b1;
	data[6] = #15000000 1'b0;
end 
// data[ 5 ]
initial
begin
	data[5] = 1'b1;
	data[5] = #5000000 1'b0;
	data[5] = #5000000 1'b1;
	data[5] = #10000000 1'b0;
	data[5] = #5000000 1'b1;
	data[5] = #5000000 1'b0;
	data[5] = #10000000 1'b1;
	data[5] = #5000000 1'b0;
	data[5] = #5000000 1'b1;
	data[5] = #5000000 1'b0;
	data[5] = #10000000 1'b1;
	data[5] = #10000000 1'b0;
end 
// data[ 4 ]
initial
begin
	data[4] = 1'b1;
	data[4] = #5000000 1'b0;
	data[4] = #5000000 1'b1;
	data[4] = #10000000 1'b0;
	data[4] = #15000000 1'b1;
	data[4] = #5000000 1'b0;
	data[4] = #5000000 1'b1;
	data[4] = #5000000 1'b0;
	data[4] = #5000000 1'b1;
	data[4] = #5000000 1'b0;
	data[4] = #5000000 1'b1;
	data[4] = #15000000 1'b0;
	data[4] = #10000000 1'b1;
end 
// data[ 3 ]
initial
begin
	data[3] = 1'b0;
	data[3] = #5000000 1'b1;
	data[3] = #10000000 1'b0;
	data[3] = #10000000 1'b1;
	data[3] = #5000000 1'b0;
	data[3] = #10000000 1'b1;
	data[3] = #5000000 1'b0;
	data[3] = #5000000 1'b1;
	data[3] = #5000000 1'b0;
	data[3] = #10000000 1'b1;
	data[3] = #10000000 1'b0;
	data[3] = #10000000 1'b1;
end 
// data[ 2 ]
initial
begin
	data[2] = 1'b0;
	data[2] = #5000000 1'b1;
	data[2] = #5000000 1'b0;
	data[2] = #15000000 1'b1;
	data[2] = #10000000 1'b0;
	data[2] = #5000000 1'b1;
	data[2] = #5000000 1'b0;
	data[2] = #5000000 1'b1;
	data[2] = #5000000 1'b0;
	data[2] = #10000000 1'b1;
	data[2] = #15000000 1'b0;
	data[2] = #10000000 1'b1;
	data[2] = #5000000 1'b0;
end 
// data[ 1 ]
initial
begin
	data[1] = 1'b1;
	data[1] = #10000000 1'b0;
	data[1] = #15000000 1'b1;
	data[1] = #5000000 1'b0;
	data[1] = #5000000 1'b1;
	data[1] = #10000000 1'b0;
	data[1] = #25000000 1'b1;
	data[1] = #20000000 1'b0;
	data[1] = #5000000 1'b1;
end 
// data[ 0 ]
initial
begin
	data[0] = 1'b0;
	data[0] = #5000000 1'b1;
	data[0] = #10000000 1'b0;
	data[0] = #5000000 1'b1;
	data[0] = #5000000 1'b0;
	data[0] = #5000000 1'b1;
	data[0] = #10000000 1'b0;
	data[0] = #20000000 1'b1;
	data[0] = #15000000 1'b0;
	data[0] = #5000000 1'b1;
	data[0] = #10000000 1'b0;
	data[0] = #5000000 1'b1;
end 

decoder_vlg_sample_tst tb_sample (
	.data(data),
	.sampler_tx(sampler)
);

decoder_vlg_check_tst tb_out(
	.H1(H1),
	.H2(H2),
	.H3(H3),
	.sampler_rx(sampler)
);
endmodule

