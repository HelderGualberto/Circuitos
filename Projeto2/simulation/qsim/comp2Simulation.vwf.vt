// Copyright (C) 1991-2014 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/08/2014 18:11:23"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    comp2
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module comp2_vlg_sample_tst(
	data,
	sampler_tx
);
input [0:7] data;
output sampler_tx;

reg sample;
time current_time;
always @(data)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module comp2_vlg_check_tst (
	result,
	sampler_rx
);
input [0:7] result;
input sampler_rx;

reg [0:7] result_expected;

reg [0:7] result_prev;

reg [0:7] result_expected_prev;

reg [0:7] last_result_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:1] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 1'b1;
end

// update real /o prevs

always @(trigger)
begin
	result_prev = result;
end

// update expected /o prevs

always @(trigger)
begin
	result_expected_prev = result_expected;
end


// expected result[ 7 ]
initial
begin
	result_expected[7] = 1'bX;
end 
// expected result[ 6 ]
initial
begin
	result_expected[6] = 1'bX;
end 
// expected result[ 5 ]
initial
begin
	result_expected[5] = 1'bX;
end 
// expected result[ 4 ]
initial
begin
	result_expected[4] = 1'bX;
end 
// expected result[ 3 ]
initial
begin
	result_expected[3] = 1'bX;
end 
// expected result[ 2 ]
initial
begin
	result_expected[2] = 1'bX;
end 
// expected result[ 1 ]
initial
begin
	result_expected[1] = 1'bX;
end 
// expected result[ 0 ]
initial
begin
	result_expected[0] = 1'bX;
end 
// generate trigger
always @(result_expected or result)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected result = %b | ",result_expected_prev);
	$display("| real result = %b | ",result_prev);
`endif
	if (
		( result_expected_prev[0] !== 1'bx ) && ( result_prev[0] !== result_expected_prev[0] )
		&& ((result_expected_prev[0] !== last_result_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_result_exp[0] = result_expected_prev[0];
	end
	if (
		( result_expected_prev[1] !== 1'bx ) && ( result_prev[1] !== result_expected_prev[1] )
		&& ((result_expected_prev[1] !== last_result_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_result_exp[1] = result_expected_prev[1];
	end
	if (
		( result_expected_prev[2] !== 1'bx ) && ( result_prev[2] !== result_expected_prev[2] )
		&& ((result_expected_prev[2] !== last_result_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_result_exp[2] = result_expected_prev[2];
	end
	if (
		( result_expected_prev[3] !== 1'bx ) && ( result_prev[3] !== result_expected_prev[3] )
		&& ((result_expected_prev[3] !== last_result_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_result_exp[3] = result_expected_prev[3];
	end
	if (
		( result_expected_prev[4] !== 1'bx ) && ( result_prev[4] !== result_expected_prev[4] )
		&& ((result_expected_prev[4] !== last_result_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_result_exp[4] = result_expected_prev[4];
	end
	if (
		( result_expected_prev[5] !== 1'bx ) && ( result_prev[5] !== result_expected_prev[5] )
		&& ((result_expected_prev[5] !== last_result_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_result_exp[5] = result_expected_prev[5];
	end
	if (
		( result_expected_prev[6] !== 1'bx ) && ( result_prev[6] !== result_expected_prev[6] )
		&& ((result_expected_prev[6] !== last_result_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_result_exp[6] = result_expected_prev[6];
	end
	if (
		( result_expected_prev[7] !== 1'bx ) && ( result_prev[7] !== result_expected_prev[7] )
		&& ((result_expected_prev[7] !== last_result_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_result_exp[7] = result_expected_prev[7];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module comp2_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [0:7] data;
// wires                                               
wire [0:7] result;

wire sampler;                             

// assign statements (if any)                          
comp2 i1 (
// port map - connection between master ports and signals/registers   
	.data(data),
	.result(result)
);
// data[ 7 ]
initial
begin
	data[7] = 1'b0;
	data[7] = #150000 1'b1;
	data[7] = #100000 1'b0;
	data[7] = #50000 1'b1;
	data[7] = #100000 1'b0;
	data[7] = #150000 1'b1;
	data[7] = #50000 1'b0;
	data[7] = #50000 1'b1;
	data[7] = #250000 1'b0;
	data[7] = #50000 1'b1;
end 
// data[ 6 ]
initial
begin
	data[6] = 1'b0;
	data[6] = #100000 1'b1;
	data[6] = #50000 1'b0;
	data[6] = #200000 1'b1;
	data[6] = #50000 1'b0;
	data[6] = #50000 1'b1;
	data[6] = #50000 1'b0;
	data[6] = #50000 1'b1;
	data[6] = #150000 1'b0;
	data[6] = #150000 1'b1;
	data[6] = #50000 1'b0;
end 
// data[ 5 ]
initial
begin
	data[5] = 1'b0;
	data[5] = #250000 1'b1;
	data[5] = #350000 1'b0;
	data[5] = #100000 1'b1;
	data[5] = #50000 1'b0;
	data[5] = #150000 1'b1;
	data[5] = #50000 1'b0;
end 
// data[ 4 ]
initial
begin
	data[4] = 1'b0;
	data[4] = #100000 1'b1;
	data[4] = #50000 1'b0;
	data[4] = #50000 1'b1;
	data[4] = #100000 1'b0;
	data[4] = #50000 1'b1;
	data[4] = #50000 1'b0;
	data[4] = #50000 1'b1;
	data[4] = #150000 1'b0;
	data[4] = #200000 1'b1;
	data[4] = #150000 1'b0;
end 
// data[ 3 ]
initial
begin
	data[3] = 1'b1;
	data[3] = #50000 1'b0;
	data[3] = #100000 1'b1;
	data[3] = #50000 1'b0;
	data[3] = #50000 1'b1;
	data[3] = #50000 1'b0;
	data[3] = #50000 1'b1;
	data[3] = #100000 1'b0;
	data[3] = #200000 1'b1;
	data[3] = #100000 1'b0;
	data[3] = #50000 1'b1;
	data[3] = #150000 1'b0;
end 
// data[ 2 ]
initial
begin
	data[2] = 1'b0;
	data[2] = #250000 1'b1;
	data[2] = #50000 1'b0;
	data[2] = #100000 1'b1;
	data[2] = #100000 1'b0;
	data[2] = #200000 1'b1;
	data[2] = #50000 1'b0;
	data[2] = #50000 1'b1;
	data[2] = #50000 1'b0;
	data[2] = #50000 1'b1;
end 
// data[ 1 ]
initial
begin
	data[1] = 1'b0;
	data[1] = #50000 1'b1;
	data[1] = #300000 1'b0;
	data[1] = #50000 1'b1;
	data[1] = #200000 1'b0;
	data[1] = #50000 1'b1;
	data[1] = #100000 1'b0;
	data[1] = #50000 1'b1;
	data[1] = #150000 1'b0;
end 
// data[ 0 ]
initial
begin
	data[0] = 1'b0;
	data[0] = #50000 1'b1;
	data[0] = #100000 1'b0;
	data[0] = #100000 1'b1;
	data[0] = #300000 1'b0;
	data[0] = #50000 1'b1;
	data[0] = #50000 1'b0;
	data[0] = #50000 1'b1;
	data[0] = #100000 1'b0;
end 

comp2_vlg_sample_tst tb_sample (
	.data(data),
	.sampler_tx(sampler)
);

comp2_vlg_check_tst tb_out(
	.result(result),
	.sampler_rx(sampler)
);
endmodule

