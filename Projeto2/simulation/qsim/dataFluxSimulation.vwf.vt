// Copyright (C) 1991-2014 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/07/2014 09:11:10"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    dataFlux
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module dataFlux_vlg_sample_tst(
	CLK,
	CLR,
	data,
	m0,
	m1,
	sampler_tx
);
input  CLK;
input  CLR;
input [0:6] data;
input  m0;
input  m1;
output sampler_tx;

reg sample;
time current_time;
always @(CLK or CLR or data or m0 or m1)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module dataFlux_vlg_check_tst (
	A,
	B,
	CLKout,
	sampler_rx
);
input [0:6] A;
input [0:6] B;
input  CLKout;
input sampler_rx;

reg [0:6] A_expected;
reg [0:6] B_expected;
reg  CLKout_expected;

reg [0:6] A_prev;
reg [0:6] B_prev;
reg  CLKout_prev;

reg [0:6] A_expected_prev;
reg [0:6] B_expected_prev;
reg  CLKout_expected_prev;

reg [0:6] last_A_exp;
reg [0:6] last_B_exp;
reg  last_CLKout_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	A_prev = A;
	B_prev = B;
	CLKout_prev = CLKout;
end

// update expected /o prevs

always @(trigger)
begin
	A_expected_prev = A_expected;
	B_expected_prev = B_expected;
	CLKout_expected_prev = CLKout_expected;
end



// expected CLKout
initial
begin
	CLKout_expected = 1'bX;
	CLKout_expected = #999000 1'b0;
end 
// expected A[ 6 ]
initial
begin
	A_expected[6] = 1'bX;
	A_expected[6] = #999000 1'b0;
end 
// expected A[ 5 ]
initial
begin
	A_expected[5] = 1'bX;
	A_expected[5] = #999000 1'b0;
end 
// expected A[ 4 ]
initial
begin
	A_expected[4] = 1'bX;
	A_expected[4] = #999000 1'b0;
end 
// expected A[ 3 ]
initial
begin
	A_expected[3] = 1'bX;
	A_expected[3] = #999000 1'b0;
end 
// expected A[ 2 ]
initial
begin
	A_expected[2] = 1'bX;
	A_expected[2] = #999000 1'b0;
end 
// expected A[ 1 ]
initial
begin
	A_expected[1] = 1'bX;
	A_expected[1] = #999000 1'b0;
end 
// expected A[ 0 ]
initial
begin
	A_expected[0] = 1'bX;
	A_expected[0] = #999000 1'b0;
end 
// expected B[ 6 ]
initial
begin
	B_expected[6] = 1'bX;
	B_expected[6] = #999000 1'b0;
end 
// expected B[ 5 ]
initial
begin
	B_expected[5] = 1'bX;
	B_expected[5] = #999000 1'b0;
end 
// expected B[ 4 ]
initial
begin
	B_expected[4] = 1'bX;
	B_expected[4] = #999000 1'b0;
end 
// expected B[ 3 ]
initial
begin
	B_expected[3] = 1'bX;
	B_expected[3] = #999000 1'b0;
end 
// expected B[ 2 ]
initial
begin
	B_expected[2] = 1'bX;
	B_expected[2] = #999000 1'b0;
end 
// expected B[ 1 ]
initial
begin
	B_expected[1] = 1'bX;
	B_expected[1] = #999000 1'b0;
end 
// expected B[ 0 ]
initial
begin
	B_expected[0] = 1'bX;
	B_expected[0] = #999000 1'b0;
end 
// generate trigger
always @(A_expected or A or B_expected or B or CLKout_expected or CLKout)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected A = %b | expected B = %b | expected CLKout = %b | ",A_expected_prev,B_expected_prev,CLKout_expected_prev);
	$display("| real A = %b | real B = %b | real CLKout = %b | ",A_prev,B_prev,CLKout_prev);
`endif
	if (
		( A_expected_prev[0] !== 1'bx ) && ( A_prev[0] !== A_expected_prev[0] )
		&& ((A_expected_prev[0] !== last_A_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[0] = A_expected_prev[0];
	end
	if (
		( A_expected_prev[1] !== 1'bx ) && ( A_prev[1] !== A_expected_prev[1] )
		&& ((A_expected_prev[1] !== last_A_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[1] = A_expected_prev[1];
	end
	if (
		( A_expected_prev[2] !== 1'bx ) && ( A_prev[2] !== A_expected_prev[2] )
		&& ((A_expected_prev[2] !== last_A_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[2] = A_expected_prev[2];
	end
	if (
		( A_expected_prev[3] !== 1'bx ) && ( A_prev[3] !== A_expected_prev[3] )
		&& ((A_expected_prev[3] !== last_A_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[3] = A_expected_prev[3];
	end
	if (
		( A_expected_prev[4] !== 1'bx ) && ( A_prev[4] !== A_expected_prev[4] )
		&& ((A_expected_prev[4] !== last_A_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[4] = A_expected_prev[4];
	end
	if (
		( A_expected_prev[5] !== 1'bx ) && ( A_prev[5] !== A_expected_prev[5] )
		&& ((A_expected_prev[5] !== last_A_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[5] = A_expected_prev[5];
	end
	if (
		( A_expected_prev[6] !== 1'bx ) && ( A_prev[6] !== A_expected_prev[6] )
		&& ((A_expected_prev[6] !== last_A_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[6] = A_expected_prev[6];
	end
	if (
		( B_expected_prev[0] !== 1'bx ) && ( B_prev[0] !== B_expected_prev[0] )
		&& ((B_expected_prev[0] !== last_B_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_B_exp[0] = B_expected_prev[0];
	end
	if (
		( B_expected_prev[1] !== 1'bx ) && ( B_prev[1] !== B_expected_prev[1] )
		&& ((B_expected_prev[1] !== last_B_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_B_exp[1] = B_expected_prev[1];
	end
	if (
		( B_expected_prev[2] !== 1'bx ) && ( B_prev[2] !== B_expected_prev[2] )
		&& ((B_expected_prev[2] !== last_B_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_B_exp[2] = B_expected_prev[2];
	end
	if (
		( B_expected_prev[3] !== 1'bx ) && ( B_prev[3] !== B_expected_prev[3] )
		&& ((B_expected_prev[3] !== last_B_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_B_exp[3] = B_expected_prev[3];
	end
	if (
		( B_expected_prev[4] !== 1'bx ) && ( B_prev[4] !== B_expected_prev[4] )
		&& ((B_expected_prev[4] !== last_B_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_B_exp[4] = B_expected_prev[4];
	end
	if (
		( B_expected_prev[5] !== 1'bx ) && ( B_prev[5] !== B_expected_prev[5] )
		&& ((B_expected_prev[5] !== last_B_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_B_exp[5] = B_expected_prev[5];
	end
	if (
		( B_expected_prev[6] !== 1'bx ) && ( B_prev[6] !== B_expected_prev[6] )
		&& ((B_expected_prev[6] !== last_B_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_B_exp[6] = B_expected_prev[6];
	end
	if (
		( CLKout_expected_prev !== 1'bx ) && ( CLKout_prev !== CLKout_expected_prev )
		&& ((CLKout_expected_prev !== last_CLKout_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CLKout :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CLKout_expected_prev);
		$display ("     Real value = %b", CLKout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_CLKout_exp = CLKout_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#100000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module dataFlux_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK;
reg CLR;
reg [0:6] data;
reg m0;
reg m1;
// wires                                               
wire [0:6] A;
wire [0:6] B;
wire CLKout;

wire sampler;                             

// assign statements (if any)                          
dataFlux i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.B(B),
	.CLK(CLK),
	.CLKout(CLKout),
	.CLR(CLR),
	.data(data),
	.m0(m0),
	.m1(m1)
);

// CLK
always
begin
	CLK = 1'b0;
	CLK = #1000000 1'b1;
	#1000000;
end 

// CLR
initial
begin
	CLR = 1'b0;
end 
// data[ 6 ]
initial
begin
	data[6] = 1'b0;
	data[6] = #5000000 1'b1;
	data[6] = #5000000 1'b0;
	data[6] = #10000000 1'b1;
	data[6] = #5000000 1'b0;
	data[6] = #40000000 1'b1;
	data[6] = #5000000 1'b0;
	data[6] = #5000000 1'b1;
	data[6] = #5000000 1'b0;
	data[6] = #5000000 1'b1;
	data[6] = #10000000 1'b0;
end 
// data[ 5 ]
initial
begin
	data[5] = 1'b0;
	data[5] = #15000000 1'b1;
	data[5] = #10000000 1'b0;
	data[5] = #10000000 1'b1;
	data[5] = #15000000 1'b0;
	data[5] = #5000000 1'b1;
	data[5] = #10000000 1'b0;
	data[5] = #10000000 1'b1;
	data[5] = #10000000 1'b0;
	data[5] = #10000000 1'b1;
end 
// data[ 4 ]
initial
begin
	data[4] = 1'b1;
	data[4] = #10000000 1'b0;
	data[4] = #5000000 1'b1;
	data[4] = #15000000 1'b0;
	data[4] = #5000000 1'b1;
	data[4] = #5000000 1'b0;
	data[4] = #5000000 1'b1;
	data[4] = #20000000 1'b0;
	data[4] = #10000000 1'b1;
	data[4] = #20000000 1'b0;
end 
// data[ 3 ]
initial
begin
	data[3] = 1'b0;
	data[3] = #5000000 1'b1;
	data[3] = #5000000 1'b0;
	data[3] = #5000000 1'b1;
	data[3] = #20000000 1'b0;
	data[3] = #10000000 1'b1;
	data[3] = #5000000 1'b0;
	data[3] = #10000000 1'b1;
	data[3] = #5000000 1'b0;
	data[3] = #10000000 1'b1;
	data[3] = #10000000 1'b0;
	data[3] = #10000000 1'b1;
end 
// data[ 2 ]
initial
begin
	data[2] = 1'b0;
	data[2] = #10000000 1'b1;
	data[2] = #5000000 1'b0;
	data[2] = #5000000 1'b1;
	data[2] = #5000000 1'b0;
	data[2] = #5000000 1'b1;
	data[2] = #10000000 1'b0;
	data[2] = #5000000 1'b1;
	data[2] = #5000000 1'b0;
	data[2] = #5000000 1'b1;
	data[2] = #5000000 1'b0;
	data[2] = #30000000 1'b1;
end 
// data[ 1 ]
initial
begin
	data[1] = 1'b1;
	data[1] = #5000000 1'b0;
	data[1] = #10000000 1'b1;
	data[1] = #10000000 1'b0;
	data[1] = #5000000 1'b1;
	data[1] = #5000000 1'b0;
	data[1] = #5000000 1'b1;
	data[1] = #5000000 1'b0;
	data[1] = #10000000 1'b1;
	data[1] = #10000000 1'b0;
	data[1] = #15000000 1'b1;
	data[1] = #10000000 1'b0;
	data[1] = #5000000 1'b1;
end 
// data[ 0 ]
initial
begin
	data[0] = 1'b0;
	data[0] = #5000000 1'b1;
	data[0] = #15000000 1'b0;
	data[0] = #5000000 1'b1;
	data[0] = #5000000 1'b0;
	data[0] = #5000000 1'b1;
	data[0] = #5000000 1'b0;
	data[0] = #25000000 1'b1;
	data[0] = #5000000 1'b0;
	data[0] = #20000000 1'b1;
	data[0] = #5000000 1'b0;
end 

// m0
initial
begin
	m0 = 1'b0;
	m0 = #1280000 1'b1;
	m0 = #2560000 1'b0;
	m0 = #12800000 1'b1;
	m0 = #2560000 1'b0;
end 

// m1
initial
begin
	m1 = 1'b0;
	m1 = #6400000 1'b1;
	m1 = #3840000 1'b0;
	m1 = #10240000 1'b1;
	m1 = #3840000 1'b0;
end 

dataFlux_vlg_sample_tst tb_sample (
	.CLK(CLK),
	.CLR(CLR),
	.data(data),
	.m0(m0),
	.m1(m1),
	.sampler_tx(sampler)
);

dataFlux_vlg_check_tst tb_out(
	.A(A),
	.B(B),
	.CLKout(CLKout),
	.sampler_rx(sampler)
);
endmodule

