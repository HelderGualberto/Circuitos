// Copyright (C) 1991-2014 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "09/22/2014 18:08:10"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    FluxoDeDados
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module FluxoDeDados_vlg_sample_tst(
	CLK,
	Clr1,
	Clr2,
	Clr3,
	En1,
	En2,
	En3,
	IN,
	SEL,
	sampler_tx
);
input  CLK;
input  Clr1;
input  Clr2;
input  Clr3;
input  En1;
input  En2;
input  En3;
input [3:0] IN;
input  SEL;
output sampler_tx;

reg sample;
time current_time;
always @(CLK or Clr1 or Clr2 or Clr3 or En1 or En2 or En3 or IN or SEL)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module FluxoDeDados_vlg_check_tst (
	OUT,
	sampler_rx
);
input [3:0] OUT;
input sampler_rx;

reg [3:0] OUT_expected;

reg [3:0] OUT_prev;

reg [3:0] OUT_expected_prev;

reg [3:0] last_OUT_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:1] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 1'b1;
end

// update real /o prevs

always @(trigger)
begin
	OUT_prev = OUT;
end

// update expected /o prevs

always @(trigger)
begin
	OUT_expected_prev = OUT_expected;
end


// expected OUT[ 3 ]
initial
begin
	OUT_expected[3] = 1'bX;
	OUT_expected[3] = #999000 1'b0;
end 
// expected OUT[ 2 ]
initial
begin
	OUT_expected[2] = 1'bX;
	OUT_expected[2] = #999000 1'b0;
end 
// expected OUT[ 1 ]
initial
begin
	OUT_expected[1] = 1'bX;
	OUT_expected[1] = #999000 1'b0;
end 
// expected OUT[ 0 ]
initial
begin
	OUT_expected[0] = 1'bX;
	OUT_expected[0] = #999000 1'b0;
end 
// generate trigger
always @(OUT_expected or OUT)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected OUT = %b | ",OUT_expected_prev);
	$display("| real OUT = %b | ",OUT_prev);
`endif
	if (
		( OUT_expected_prev[0] !== 1'bx ) && ( OUT_prev[0] !== OUT_expected_prev[0] )
		&& ((OUT_expected_prev[0] !== last_OUT_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_expected_prev);
		$display ("     Real value = %b", OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUT_exp[0] = OUT_expected_prev[0];
	end
	if (
		( OUT_expected_prev[1] !== 1'bx ) && ( OUT_prev[1] !== OUT_expected_prev[1] )
		&& ((OUT_expected_prev[1] !== last_OUT_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_expected_prev);
		$display ("     Real value = %b", OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUT_exp[1] = OUT_expected_prev[1];
	end
	if (
		( OUT_expected_prev[2] !== 1'bx ) && ( OUT_prev[2] !== OUT_expected_prev[2] )
		&& ((OUT_expected_prev[2] !== last_OUT_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_expected_prev);
		$display ("     Real value = %b", OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUT_exp[2] = OUT_expected_prev[2];
	end
	if (
		( OUT_expected_prev[3] !== 1'bx ) && ( OUT_prev[3] !== OUT_expected_prev[3] )
		&& ((OUT_expected_prev[3] !== last_OUT_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_expected_prev);
		$display ("     Real value = %b", OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUT_exp[3] = OUT_expected_prev[3];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#100000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module FluxoDeDados_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK;
reg Clr1;
reg Clr2;
reg Clr3;
reg En1;
reg En2;
reg En3;
reg [3:0] IN;
reg SEL;
// wires                                               
wire [3:0] OUT;

wire sampler;                             

// assign statements (if any)                          
FluxoDeDados i1 (
// port map - connection between master ports and signals/registers   
	.CLK(CLK),
	.Clr1(Clr1),
	.Clr2(Clr2),
	.Clr3(Clr3),
	.En1(En1),
	.En2(En2),
	.En3(En3),
	.IN(IN),
	.OUT(OUT),
	.SEL(SEL)
);

// CLK
always
begin
	CLK = 1'b0;
	CLK = #2500000 1'b1;
	#2500000;
end 

// Clr1
initial
begin
	Clr1 = 1'b0;
end 

// Clr2
initial
begin
	Clr2 = 1'b0;
end 

// Clr3
initial
begin
	Clr3 = 1'b0;
end 

// En1
initial
begin
	En1 = 1'b0;
	En1 = #1280000 1'b1;
	En1 = #2560000 1'b0;
	En1 = #28160000 1'b1;
	En1 = #2560000 1'b0;
	En1 = #24320000 1'b1;
	En1 = #2560000 1'b0;
end 

// En2
initial
begin
	En2 = 1'b0;
	En2 = #6400000 1'b1;
	En2 = #2560000 1'b0;
	En2 = #17920000 1'b1;
	En2 = #2560000 1'b0;
	En2 = #24320000 1'b1;
	En2 = #2560000 1'b0;
end 

// En3
initial
begin
	En3 = 1'b0;
	En3 = #12500000 1'b1;
	# 2500000;
	repeat(2)
	begin
		En3 = 1'b0;
		En3 = #2500000 1'b1;
		# 2500000;
	end
	En3 = 1'b0;
	En3 = #12500000 1'b1;
	# 2500000;
	repeat(2)
	begin
		En3 = 1'b0;
		En3 = #2500000 1'b1;
		# 2500000;
	end
	En3 = 1'b0;
	En3 = #17500000 1'b1;
	# 2500000;
	repeat(6)
	begin
		En3 = 1'b0;
		En3 = #2500000 1'b1;
		# 2500000;
	end
end 
// IN[ 3 ]
initial
begin
	IN[3] = 1'b0;
	IN[3] = #1280000 1'b1;
	IN[3] = #2560000 1'b0;
	IN[3] = #2560000 1'b1;
	IN[3] = #2560000 1'b0;
	IN[3] = #23040000 1'b1;
	IN[3] = #2560000 1'b0;
end 
// IN[ 2 ]
initial
begin
	IN[2] = 1'b0;
	IN[2] = #26880000 1'b1;
	IN[2] = #2560000 1'b0;
	IN[2] = #2560000 1'b1;
	IN[2] = #2560000 1'b0;
	IN[2] = #24320000 1'b1;
	IN[2] = #2560000 1'b0;
end 
// IN[ 1 ]
initial
begin
	IN[1] = 1'b0;
	IN[1] = #1280000 1'b1;
	IN[1] = #2560000 1'b0;
	IN[1] = #23040000 1'b1;
	IN[1] = #2560000 1'b0;
	IN[1] = #2560000 1'b1;
	IN[1] = #2560000 1'b0;
	IN[1] = #19200000 1'b1;
	IN[1] = #2560000 1'b0;
end 
// IN[ 0 ]
initial
begin
	IN[0] = 1'b0;
	IN[0] = #6400000 1'b1;
	IN[0] = #2560000 1'b0;
	IN[0] = #17920000 1'b1;
	IN[0] = #2560000 1'b0;
	IN[0] = #2560000 1'b1;
	IN[0] = #2560000 1'b0;
	IN[0] = #19200000 1'b1;
	IN[0] = #2560000 1'b0;
	IN[0] = #2560000 1'b1;
	IN[0] = #2560000 1'b0;
end 

// SEL
always
begin
	SEL = 1'b0;
	SEL = #5000000 1'b1;
	#5000000;
end 

FluxoDeDados_vlg_sample_tst tb_sample (
	.CLK(CLK),
	.Clr1(Clr1),
	.Clr2(Clr2),
	.Clr3(Clr3),
	.En1(En1),
	.En2(En2),
	.En3(En3),
	.IN(IN),
	.SEL(SEL),
	.sampler_tx(sampler)
);

FluxoDeDados_vlg_check_tst tb_out(
	.OUT(OUT),
	.sampler_rx(sampler)
);
endmodule

