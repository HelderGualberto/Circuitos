// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/03/2014 10:45:17"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Integracao
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Integracao_vlg_sample_tst(
	CLK,
	IN,
	M1,
	M2,
	N1,
	N2,
	RES,
	sampler_tx
);
input  CLK;
input [3:0] IN;
input  M1;
input  M2;
input  N1;
input  N2;
input  RES;
output sampler_tx;

reg sample;
time current_time;
always @(CLK or IN or M1 or M2 or N1 or N2 or RES)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Integracao_vlg_check_tst (
	OUT,
	sampler_rx
);
input [3:0] OUT;
input sampler_rx;

reg [3:0] OUT_expected;

reg [3:0] OUT_prev;

reg [3:0] OUT_expected_prev;

reg [3:0] last_OUT_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:1] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 1'b1;
end

// update real /o prevs

always @(trigger)
begin
	OUT_prev = OUT;
end

// update expected /o prevs

always @(trigger)
begin
	OUT_expected_prev = OUT_expected;
end


// expected OUT[ 3 ]
initial
begin
	OUT_expected[3] = 1'bX;
	OUT_expected[3] = #999000 1'b0;
end 
// expected OUT[ 2 ]
initial
begin
	OUT_expected[2] = 1'bX;
	OUT_expected[2] = #999000 1'b0;
end 
// expected OUT[ 1 ]
initial
begin
	OUT_expected[1] = 1'bX;
	OUT_expected[1] = #999000 1'b0;
end 
// expected OUT[ 0 ]
initial
begin
	OUT_expected[0] = 1'bX;
	OUT_expected[0] = #999000 1'b0;
end 
// generate trigger
always @(OUT_expected or OUT)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected OUT = %b | ",OUT_expected_prev);
	$display("| real OUT = %b | ",OUT_prev);
`endif
	if (
		( OUT_expected_prev[0] !== 1'bx ) && ( OUT_prev[0] !== OUT_expected_prev[0] )
		&& ((OUT_expected_prev[0] !== last_OUT_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_expected_prev);
		$display ("     Real value = %b", OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUT_exp[0] = OUT_expected_prev[0];
	end
	if (
		( OUT_expected_prev[1] !== 1'bx ) && ( OUT_prev[1] !== OUT_expected_prev[1] )
		&& ((OUT_expected_prev[1] !== last_OUT_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_expected_prev);
		$display ("     Real value = %b", OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUT_exp[1] = OUT_expected_prev[1];
	end
	if (
		( OUT_expected_prev[2] !== 1'bx ) && ( OUT_prev[2] !== OUT_expected_prev[2] )
		&& ((OUT_expected_prev[2] !== last_OUT_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_expected_prev);
		$display ("     Real value = %b", OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUT_exp[2] = OUT_expected_prev[2];
	end
	if (
		( OUT_expected_prev[3] !== 1'bx ) && ( OUT_prev[3] !== OUT_expected_prev[3] )
		&& ((OUT_expected_prev[3] !== last_OUT_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_expected_prev);
		$display ("     Real value = %b", OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUT_exp[3] = OUT_expected_prev[3];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#100000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Integracao_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK;
reg [3:0] IN;
reg M1;
reg M2;
reg N1;
reg N2;
reg RES;
// wires                                               
wire [3:0] OUT;

wire sampler;                             

// assign statements (if any)                          
Integracao i1 (
// port map - connection between master ports and signals/registers   
	.CLK(CLK),
	.IN(IN),
	.M1(M1),
	.M2(M2),
	.N1(N1),
	.N2(N2),
	.OUT(OUT),
	.RES(RES)
);

// CLK
always
begin
	CLK = 1'b0;
	CLK = #2500000 1'b1;
	#2500000;
end 
// IN[ 3 ]
initial
begin
	IN[3] = 1'b0;
	IN[3] = #1280000 1'b1;
	IN[3] = #20480000 1'b0;
	IN[3] = #7680000 1'b1;
	IN[3] = #19200000 1'b0;
end 
// IN[ 2 ]
initial
begin
	IN[2] = 1'b0;
	IN[2] = #29440000 1'b1;
	IN[2] = #19200000 1'b0;
end 
// IN[ 1 ]
initial
begin
	IN[1] = 1'b0;
	IN[1] = #1280000 1'b1;
	IN[1] = #20480000 1'b0;
	IN[1] = #7680000 1'b1;
	IN[1] = #19200000 1'b0;
end 
// IN[ 0 ]
initial
begin
	IN[0] = 1'b0;
	IN[0] = #29440000 1'b1;
	IN[0] = #19200000 1'b0;
end 

// M1
initial
begin
	M1 = 1'b0;
	M1 = #49920000 1'b1;
	M1 = #14080000 1'b0;
end 

// M2
initial
begin
	M2 = 1'b0;
	M2 = #69120000 1'b1;
	M2 = #17920000 1'b0;
end 

// N1
initial
begin
	N1 = 1'b0;
	N1 = #5120000 1'b1;
	N1 = #11520000 1'b0;
end 

// N2
initial
begin
	N2 = 1'b0;
	N2 = #30720000 1'b1;
	N2 = #12800000 1'b0;
end 

// RES
initial
begin
	RES = 1'b0;
end 

Integracao_vlg_sample_tst tb_sample (
	.CLK(CLK),
	.IN(IN),
	.M1(M1),
	.M2(M2),
	.N1(N1),
	.N2(N2),
	.RES(RES),
	.sampler_tx(sampler)
);

Integracao_vlg_check_tst tb_out(
	.OUT(OUT),
	.sampler_rx(sampler)
);
endmodule

