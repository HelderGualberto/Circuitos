// Copyright (C) 1991-2014 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "09/22/2014 19:28:23"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    UnidadedeControle
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module UnidadedeControle_vlg_sample_tst(
	CLKUC,
	M1,
	M2,
	N1,
	N2,
	RES,
	sampler_tx
);
input  CLKUC;
input  M1;
input  M2;
input  N1;
input  N2;
input  RES;
output sampler_tx;

reg sample;
time current_time;
always @(CLKUC or M1 or M2 or N1 or N2 or RES)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module UnidadedeControle_vlg_check_tst (
	CLKout,
	CLR1,
	CLR2,
	CLR3,
	EN1,
	EN2,
	EN3,
	SEL,
	sampler_rx
);
input  CLKout;
input  CLR1;
input  CLR2;
input  CLR3;
input  EN1;
input  EN2;
input  EN3;
input  SEL;
input sampler_rx;

reg  CLKout_expected;
reg  CLR1_expected;
reg  CLR2_expected;
reg  CLR3_expected;
reg  EN1_expected;
reg  EN2_expected;
reg  EN3_expected;
reg  SEL_expected;

reg  CLKout_prev;
reg  CLR1_prev;
reg  CLR2_prev;
reg  CLR3_prev;
reg  EN1_prev;
reg  EN2_prev;
reg  EN3_prev;
reg  SEL_prev;

reg  CLKout_expected_prev;
reg  CLR1_expected_prev;
reg  CLR2_expected_prev;
reg  CLR3_expected_prev;
reg  EN1_expected_prev;
reg  EN2_expected_prev;
reg  EN3_expected_prev;
reg  SEL_expected_prev;

reg  last_CLKout_exp;
reg  last_CLR1_exp;
reg  last_CLR2_exp;
reg  last_CLR3_exp;
reg  last_EN1_exp;
reg  last_EN2_exp;
reg  last_EN3_exp;
reg  last_SEL_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:8] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 8'b1;
end

// update real /o prevs

always @(trigger)
begin
	CLKout_prev = CLKout;
	CLR1_prev = CLR1;
	CLR2_prev = CLR2;
	CLR3_prev = CLR3;
	EN1_prev = EN1;
	EN2_prev = EN2;
	EN3_prev = EN3;
	SEL_prev = SEL;
end

// update expected /o prevs

always @(trigger)
begin
	CLKout_expected_prev = CLKout_expected;
	CLR1_expected_prev = CLR1_expected;
	CLR2_expected_prev = CLR2_expected;
	CLR3_expected_prev = CLR3_expected;
	EN1_expected_prev = EN1_expected;
	EN2_expected_prev = EN2_expected;
	EN3_expected_prev = EN3_expected;
	SEL_expected_prev = SEL_expected;
end



// expected CLKout
initial
begin
	CLKout_expected = 1'bX;
end 

// expected SEL
initial
begin
	SEL_expected = 1'bX;
end 

// expected EN1
initial
begin
	EN1_expected = 1'bX;
end 

// expected EN2
initial
begin
	EN2_expected = 1'bX;
end 

// expected EN3
initial
begin
	EN3_expected = 1'bX;
end 

// expected CLR1
initial
begin
	CLR1_expected = 1'bX;
end 

// expected CLR2
initial
begin
	CLR2_expected = 1'bX;
end 

// expected CLR3
initial
begin
	CLR3_expected = 1'bX;
end 
// generate trigger
always @(CLKout_expected or CLKout or CLR1_expected or CLR1 or CLR2_expected or CLR2 or CLR3_expected or CLR3 or EN1_expected or EN1 or EN2_expected or EN2 or EN3_expected or EN3 or SEL_expected or SEL)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected CLKout = %b | expected CLR1 = %b | expected CLR2 = %b | expected CLR3 = %b | expected EN1 = %b | expected EN2 = %b | expected EN3 = %b | expected SEL = %b | ",CLKout_expected_prev,CLR1_expected_prev,CLR2_expected_prev,CLR3_expected_prev,EN1_expected_prev,EN2_expected_prev,EN3_expected_prev,SEL_expected_prev);
	$display("| real CLKout = %b | real CLR1 = %b | real CLR2 = %b | real CLR3 = %b | real EN1 = %b | real EN2 = %b | real EN3 = %b | real SEL = %b | ",CLKout_prev,CLR1_prev,CLR2_prev,CLR3_prev,EN1_prev,EN2_prev,EN3_prev,SEL_prev);
`endif
	if (
		( CLKout_expected_prev !== 1'bx ) && ( CLKout_prev !== CLKout_expected_prev )
		&& ((CLKout_expected_prev !== last_CLKout_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CLKout :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CLKout_expected_prev);
		$display ("     Real value = %b", CLKout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_CLKout_exp = CLKout_expected_prev;
	end
	if (
		( CLR1_expected_prev !== 1'bx ) && ( CLR1_prev !== CLR1_expected_prev )
		&& ((CLR1_expected_prev !== last_CLR1_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CLR1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CLR1_expected_prev);
		$display ("     Real value = %b", CLR1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CLR1_exp = CLR1_expected_prev;
	end
	if (
		( CLR2_expected_prev !== 1'bx ) && ( CLR2_prev !== CLR2_expected_prev )
		&& ((CLR2_expected_prev !== last_CLR2_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CLR2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CLR2_expected_prev);
		$display ("     Real value = %b", CLR2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_CLR2_exp = CLR2_expected_prev;
	end
	if (
		( CLR3_expected_prev !== 1'bx ) && ( CLR3_prev !== CLR3_expected_prev )
		&& ((CLR3_expected_prev !== last_CLR3_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CLR3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CLR3_expected_prev);
		$display ("     Real value = %b", CLR3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_CLR3_exp = CLR3_expected_prev;
	end
	if (
		( EN1_expected_prev !== 1'bx ) && ( EN1_prev !== EN1_expected_prev )
		&& ((EN1_expected_prev !== last_EN1_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EN1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EN1_expected_prev);
		$display ("     Real value = %b", EN1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_EN1_exp = EN1_expected_prev;
	end
	if (
		( EN2_expected_prev !== 1'bx ) && ( EN2_prev !== EN2_expected_prev )
		&& ((EN2_expected_prev !== last_EN2_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EN2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EN2_expected_prev);
		$display ("     Real value = %b", EN2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_EN2_exp = EN2_expected_prev;
	end
	if (
		( EN3_expected_prev !== 1'bx ) && ( EN3_prev !== EN3_expected_prev )
		&& ((EN3_expected_prev !== last_EN3_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EN3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EN3_expected_prev);
		$display ("     Real value = %b", EN3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_EN3_exp = EN3_expected_prev;
	end
	if (
		( SEL_expected_prev !== 1'bx ) && ( SEL_prev !== SEL_expected_prev )
		&& ((SEL_expected_prev !== last_SEL_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SEL :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SEL_expected_prev);
		$display ("     Real value = %b", SEL_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_SEL_exp = SEL_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#100000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module UnidadedeControle_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLKUC;
reg M1;
reg M2;
reg N1;
reg N2;
reg RES;
// wires                                               
wire CLKout;
wire CLR1;
wire CLR2;
wire CLR3;
wire EN1;
wire EN2;
wire EN3;
wire SEL;

wire sampler;                             

// assign statements (if any)                          
UnidadedeControle i1 (
// port map - connection between master ports and signals/registers   
	.CLKout(CLKout),
	.CLKUC(CLKUC),
	.CLR1(CLR1),
	.CLR2(CLR2),
	.CLR3(CLR3),
	.EN1(EN1),
	.EN2(EN2),
	.EN3(EN3),
	.M1(M1),
	.M2(M2),
	.N1(N1),
	.N2(N2),
	.RES(RES),
	.SEL(SEL)
);

// CLKUC
always
begin
	CLKUC = 1'b0;
	CLKUC = #2500000 1'b1;
	#2500000;
end 

// M1
initial
begin
	M1 = 1'b0;
	M1 = #3840000 1'b1;
	M1 = #1280000 1'b0;
	M1 = #16640000 1'b1;
	M1 = #2560000 1'b0;
	M1 = #6400000 1'b1;
	M1 = #2560000 1'b0;
	M1 = #5120000 1'b1;
	M1 = #11520000 1'b0;
	M1 = #48800000 1'b1;
end 

// M2
initial
begin
	M2 = 1'b0;
	M2 = #6400000 1'b1;
	M2 = #2560000 1'b0;
	M2 = #12800000 1'b1;
	M2 = #2560000 1'b0;
	M2 = #6400000 1'b1;
	M2 = #2560000 1'b0;
	M2 = #19200000 1'b1;
	M2 = #6400000 1'b0;
end 

// N1
initial
begin
	N1 = 1'b0;
	N1 = #11520000 1'b1;
	N1 = #2560000 1'b0;
	N1 = #11520000 1'b1;
	N1 = #2560000 1'b0;
	N1 = #2560000 1'b1;
	N1 = #2560000 1'b0;
	N1 = #33280000 1'b1;
	N1 = #11520000 1'b0;
end 

// N2
initial
begin
	N2 = 1'b0;
	N2 = #16640000 1'b1;
	N2 = #2560000 1'b0;
	N2 = #6400000 1'b1;
	N2 = #2560000 1'b0;
	N2 = #2560000 1'b1;
	N2 = #2560000 1'b0;
	N2 = #47360000 1'b1;
	N2 = #10240000 1'b0;
end 

// RES
initial
begin
	RES = 1'b0;
	RES = #55040000 1'b1;
	RES = #5120000 1'b0;
	RES = #10240000 1'b1;
	RES = #5120000 1'b0;
	RES = #7680000 1'b1;
	RES = #5120000 1'b0;
end 

UnidadedeControle_vlg_sample_tst tb_sample (
	.CLKUC(CLKUC),
	.M1(M1),
	.M2(M2),
	.N1(N1),
	.N2(N2),
	.RES(RES),
	.sampler_tx(sampler)
);

UnidadedeControle_vlg_check_tst tb_out(
	.CLKout(CLKout),
	.CLR1(CLR1),
	.CLR2(CLR2),
	.CLR3(CLR3),
	.EN1(EN1),
	.EN2(EN2),
	.EN3(EN3),
	.SEL(SEL),
	.sampler_rx(sampler)
);
endmodule

