// Copyright (C) 1991-2014 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/20/2014 18:07:20"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    characterPattern
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module characterPattern_vlg_sample_tst(
	input,
	s,
	sampler_tx
);
input [0:14] input;
input [0:2] s;
output sampler_tx;

reg sample;
time current_time;
always @(input or s)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module characterPattern_vlg_check_tst (
	out0,
	out1,
	out2,
	out3,
	out4,
	out5,
	out6,
	out7,
	sampler_rx
);
input [0:6] out0;
input [0:6] out1;
input [0:6] out2;
input [0:6] out3;
input [0:6] out4;
input [0:6] out5;
input [0:6] out6;
input [0:6] out7;
input sampler_rx;

reg [0:6] out0_expected;
reg [0:6] out1_expected;
reg [0:6] out2_expected;
reg [0:6] out3_expected;
reg [0:6] out4_expected;
reg [0:6] out5_expected;
reg [0:6] out6_expected;
reg [0:6] out7_expected;

reg [0:6] out0_prev;
reg [0:6] out1_prev;
reg [0:6] out2_prev;
reg [0:6] out3_prev;
reg [0:6] out4_prev;
reg [0:6] out5_prev;
reg [0:6] out6_prev;
reg [0:6] out7_prev;

reg [0:6] out0_expected_prev;
reg [0:6] out1_expected_prev;
reg [0:6] out2_expected_prev;
reg [0:6] out3_expected_prev;
reg [0:6] out4_expected_prev;
reg [0:6] out5_expected_prev;
reg [0:6] out6_expected_prev;
reg [0:6] out7_expected_prev;

reg [0:6] last_out0_exp;
reg [0:6] last_out1_exp;
reg [0:6] last_out2_exp;
reg [0:6] last_out3_exp;
reg [0:6] last_out4_exp;
reg [0:6] last_out5_exp;
reg [0:6] last_out6_exp;
reg [0:6] last_out7_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:8] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 8'b1;
end

// update real /o prevs

always @(trigger)
begin
	out0_prev = out0;
	out1_prev = out1;
	out2_prev = out2;
	out3_prev = out3;
	out4_prev = out4;
	out5_prev = out5;
	out6_prev = out6;
	out7_prev = out7;
end

// update expected /o prevs

always @(trigger)
begin
	out0_expected_prev = out0_expected;
	out1_expected_prev = out1_expected;
	out2_expected_prev = out2_expected;
	out3_expected_prev = out3_expected;
	out4_expected_prev = out4_expected;
	out5_expected_prev = out5_expected;
	out6_expected_prev = out6_expected;
	out7_expected_prev = out7_expected;
end


// expected out0[ 6 ]
initial
begin
	out0_expected[6] = 1'bX;
end 
// expected out0[ 5 ]
initial
begin
	out0_expected[5] = 1'bX;
end 
// expected out0[ 4 ]
initial
begin
	out0_expected[4] = 1'bX;
end 
// expected out0[ 3 ]
initial
begin
	out0_expected[3] = 1'bX;
end 
// expected out0[ 2 ]
initial
begin
	out0_expected[2] = 1'bX;
end 
// expected out0[ 1 ]
initial
begin
	out0_expected[1] = 1'bX;
end 
// expected out0[ 0 ]
initial
begin
	out0_expected[0] = 1'bX;
end 
// expected out1[ 6 ]
initial
begin
	out1_expected[6] = 1'bX;
end 
// expected out1[ 5 ]
initial
begin
	out1_expected[5] = 1'bX;
end 
// expected out1[ 4 ]
initial
begin
	out1_expected[4] = 1'bX;
end 
// expected out1[ 3 ]
initial
begin
	out1_expected[3] = 1'bX;
end 
// expected out1[ 2 ]
initial
begin
	out1_expected[2] = 1'bX;
end 
// expected out1[ 1 ]
initial
begin
	out1_expected[1] = 1'bX;
end 
// expected out1[ 0 ]
initial
begin
	out1_expected[0] = 1'bX;
end 
// expected out2[ 6 ]
initial
begin
	out2_expected[6] = 1'bX;
end 
// expected out2[ 5 ]
initial
begin
	out2_expected[5] = 1'bX;
end 
// expected out2[ 4 ]
initial
begin
	out2_expected[4] = 1'bX;
end 
// expected out2[ 3 ]
initial
begin
	out2_expected[3] = 1'bX;
end 
// expected out2[ 2 ]
initial
begin
	out2_expected[2] = 1'bX;
end 
// expected out2[ 1 ]
initial
begin
	out2_expected[1] = 1'bX;
end 
// expected out2[ 0 ]
initial
begin
	out2_expected[0] = 1'bX;
end 
// expected out3[ 6 ]
initial
begin
	out3_expected[6] = 1'bX;
end 
// expected out3[ 5 ]
initial
begin
	out3_expected[5] = 1'bX;
end 
// expected out3[ 4 ]
initial
begin
	out3_expected[4] = 1'bX;
end 
// expected out3[ 3 ]
initial
begin
	out3_expected[3] = 1'bX;
end 
// expected out3[ 2 ]
initial
begin
	out3_expected[2] = 1'bX;
end 
// expected out3[ 1 ]
initial
begin
	out3_expected[1] = 1'bX;
end 
// expected out3[ 0 ]
initial
begin
	out3_expected[0] = 1'bX;
end 
// expected out4[ 6 ]
initial
begin
	out4_expected[6] = 1'bX;
end 
// expected out4[ 5 ]
initial
begin
	out4_expected[5] = 1'bX;
end 
// expected out4[ 4 ]
initial
begin
	out4_expected[4] = 1'bX;
end 
// expected out4[ 3 ]
initial
begin
	out4_expected[3] = 1'bX;
end 
// expected out4[ 2 ]
initial
begin
	out4_expected[2] = 1'bX;
end 
// expected out4[ 1 ]
initial
begin
	out4_expected[1] = 1'bX;
end 
// expected out4[ 0 ]
initial
begin
	out4_expected[0] = 1'bX;
end 
// expected out5[ 6 ]
initial
begin
	out5_expected[6] = 1'bX;
end 
// expected out5[ 5 ]
initial
begin
	out5_expected[5] = 1'bX;
end 
// expected out5[ 4 ]
initial
begin
	out5_expected[4] = 1'bX;
end 
// expected out5[ 3 ]
initial
begin
	out5_expected[3] = 1'bX;
end 
// expected out5[ 2 ]
initial
begin
	out5_expected[2] = 1'bX;
end 
// expected out5[ 1 ]
initial
begin
	out5_expected[1] = 1'bX;
end 
// expected out5[ 0 ]
initial
begin
	out5_expected[0] = 1'bX;
end 
// expected out6[ 6 ]
initial
begin
	out6_expected[6] = 1'bX;
end 
// expected out6[ 5 ]
initial
begin
	out6_expected[5] = 1'bX;
end 
// expected out6[ 4 ]
initial
begin
	out6_expected[4] = 1'bX;
end 
// expected out6[ 3 ]
initial
begin
	out6_expected[3] = 1'bX;
end 
// expected out6[ 2 ]
initial
begin
	out6_expected[2] = 1'bX;
end 
// expected out6[ 1 ]
initial
begin
	out6_expected[1] = 1'bX;
end 
// expected out6[ 0 ]
initial
begin
	out6_expected[0] = 1'bX;
end 
// expected out7[ 6 ]
initial
begin
	out7_expected[6] = 1'bX;
end 
// expected out7[ 5 ]
initial
begin
	out7_expected[5] = 1'bX;
end 
// expected out7[ 4 ]
initial
begin
	out7_expected[4] = 1'bX;
end 
// expected out7[ 3 ]
initial
begin
	out7_expected[3] = 1'bX;
end 
// expected out7[ 2 ]
initial
begin
	out7_expected[2] = 1'bX;
end 
// expected out7[ 1 ]
initial
begin
	out7_expected[1] = 1'bX;
end 
// expected out7[ 0 ]
initial
begin
	out7_expected[0] = 1'bX;
end 
// generate trigger
always @(out0_expected or out0 or out1_expected or out1 or out2_expected or out2 or out3_expected or out3 or out4_expected or out4 or out5_expected or out5 or out6_expected or out6 or out7_expected or out7)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected out0 = %b | expected out1 = %b | expected out2 = %b | expected out3 = %b | expected out4 = %b | expected out5 = %b | expected out6 = %b | expected out7 = %b | ",out0_expected_prev,out1_expected_prev,out2_expected_prev,out3_expected_prev,out4_expected_prev,out5_expected_prev,out6_expected_prev,out7_expected_prev);
	$display("| real out0 = %b | real out1 = %b | real out2 = %b | real out3 = %b | real out4 = %b | real out5 = %b | real out6 = %b | real out7 = %b | ",out0_prev,out1_prev,out2_prev,out3_prev,out4_prev,out5_prev,out6_prev,out7_prev);
`endif
	if (
		( out0_expected_prev[0] !== 1'bx ) && ( out0_prev[0] !== out0_expected_prev[0] )
		&& ((out0_expected_prev[0] !== last_out0_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out0[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out0_expected_prev);
		$display ("     Real value = %b", out0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_out0_exp[0] = out0_expected_prev[0];
	end
	if (
		( out0_expected_prev[1] !== 1'bx ) && ( out0_prev[1] !== out0_expected_prev[1] )
		&& ((out0_expected_prev[1] !== last_out0_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out0[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out0_expected_prev);
		$display ("     Real value = %b", out0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_out0_exp[1] = out0_expected_prev[1];
	end
	if (
		( out0_expected_prev[2] !== 1'bx ) && ( out0_prev[2] !== out0_expected_prev[2] )
		&& ((out0_expected_prev[2] !== last_out0_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out0[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out0_expected_prev);
		$display ("     Real value = %b", out0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_out0_exp[2] = out0_expected_prev[2];
	end
	if (
		( out0_expected_prev[3] !== 1'bx ) && ( out0_prev[3] !== out0_expected_prev[3] )
		&& ((out0_expected_prev[3] !== last_out0_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out0[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out0_expected_prev);
		$display ("     Real value = %b", out0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_out0_exp[3] = out0_expected_prev[3];
	end
	if (
		( out0_expected_prev[4] !== 1'bx ) && ( out0_prev[4] !== out0_expected_prev[4] )
		&& ((out0_expected_prev[4] !== last_out0_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out0[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out0_expected_prev);
		$display ("     Real value = %b", out0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_out0_exp[4] = out0_expected_prev[4];
	end
	if (
		( out0_expected_prev[5] !== 1'bx ) && ( out0_prev[5] !== out0_expected_prev[5] )
		&& ((out0_expected_prev[5] !== last_out0_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out0[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out0_expected_prev);
		$display ("     Real value = %b", out0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_out0_exp[5] = out0_expected_prev[5];
	end
	if (
		( out0_expected_prev[6] !== 1'bx ) && ( out0_prev[6] !== out0_expected_prev[6] )
		&& ((out0_expected_prev[6] !== last_out0_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out0[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out0_expected_prev);
		$display ("     Real value = %b", out0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_out0_exp[6] = out0_expected_prev[6];
	end
	if (
		( out1_expected_prev[0] !== 1'bx ) && ( out1_prev[0] !== out1_expected_prev[0] )
		&& ((out1_expected_prev[0] !== last_out1_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out1_expected_prev);
		$display ("     Real value = %b", out1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_out1_exp[0] = out1_expected_prev[0];
	end
	if (
		( out1_expected_prev[1] !== 1'bx ) && ( out1_prev[1] !== out1_expected_prev[1] )
		&& ((out1_expected_prev[1] !== last_out1_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out1_expected_prev);
		$display ("     Real value = %b", out1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_out1_exp[1] = out1_expected_prev[1];
	end
	if (
		( out1_expected_prev[2] !== 1'bx ) && ( out1_prev[2] !== out1_expected_prev[2] )
		&& ((out1_expected_prev[2] !== last_out1_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out1_expected_prev);
		$display ("     Real value = %b", out1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_out1_exp[2] = out1_expected_prev[2];
	end
	if (
		( out1_expected_prev[3] !== 1'bx ) && ( out1_prev[3] !== out1_expected_prev[3] )
		&& ((out1_expected_prev[3] !== last_out1_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out1_expected_prev);
		$display ("     Real value = %b", out1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_out1_exp[3] = out1_expected_prev[3];
	end
	if (
		( out1_expected_prev[4] !== 1'bx ) && ( out1_prev[4] !== out1_expected_prev[4] )
		&& ((out1_expected_prev[4] !== last_out1_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out1_expected_prev);
		$display ("     Real value = %b", out1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_out1_exp[4] = out1_expected_prev[4];
	end
	if (
		( out1_expected_prev[5] !== 1'bx ) && ( out1_prev[5] !== out1_expected_prev[5] )
		&& ((out1_expected_prev[5] !== last_out1_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out1_expected_prev);
		$display ("     Real value = %b", out1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_out1_exp[5] = out1_expected_prev[5];
	end
	if (
		( out1_expected_prev[6] !== 1'bx ) && ( out1_prev[6] !== out1_expected_prev[6] )
		&& ((out1_expected_prev[6] !== last_out1_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out1_expected_prev);
		$display ("     Real value = %b", out1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_out1_exp[6] = out1_expected_prev[6];
	end
	if (
		( out2_expected_prev[0] !== 1'bx ) && ( out2_prev[0] !== out2_expected_prev[0] )
		&& ((out2_expected_prev[0] !== last_out2_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out2_expected_prev);
		$display ("     Real value = %b", out2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_out2_exp[0] = out2_expected_prev[0];
	end
	if (
		( out2_expected_prev[1] !== 1'bx ) && ( out2_prev[1] !== out2_expected_prev[1] )
		&& ((out2_expected_prev[1] !== last_out2_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out2_expected_prev);
		$display ("     Real value = %b", out2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_out2_exp[1] = out2_expected_prev[1];
	end
	if (
		( out2_expected_prev[2] !== 1'bx ) && ( out2_prev[2] !== out2_expected_prev[2] )
		&& ((out2_expected_prev[2] !== last_out2_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out2_expected_prev);
		$display ("     Real value = %b", out2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_out2_exp[2] = out2_expected_prev[2];
	end
	if (
		( out2_expected_prev[3] !== 1'bx ) && ( out2_prev[3] !== out2_expected_prev[3] )
		&& ((out2_expected_prev[3] !== last_out2_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out2_expected_prev);
		$display ("     Real value = %b", out2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_out2_exp[3] = out2_expected_prev[3];
	end
	if (
		( out2_expected_prev[4] !== 1'bx ) && ( out2_prev[4] !== out2_expected_prev[4] )
		&& ((out2_expected_prev[4] !== last_out2_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out2_expected_prev);
		$display ("     Real value = %b", out2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_out2_exp[4] = out2_expected_prev[4];
	end
	if (
		( out2_expected_prev[5] !== 1'bx ) && ( out2_prev[5] !== out2_expected_prev[5] )
		&& ((out2_expected_prev[5] !== last_out2_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out2_expected_prev);
		$display ("     Real value = %b", out2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_out2_exp[5] = out2_expected_prev[5];
	end
	if (
		( out2_expected_prev[6] !== 1'bx ) && ( out2_prev[6] !== out2_expected_prev[6] )
		&& ((out2_expected_prev[6] !== last_out2_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out2_expected_prev);
		$display ("     Real value = %b", out2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_out2_exp[6] = out2_expected_prev[6];
	end
	if (
		( out3_expected_prev[0] !== 1'bx ) && ( out3_prev[0] !== out3_expected_prev[0] )
		&& ((out3_expected_prev[0] !== last_out3_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out3[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out3_expected_prev);
		$display ("     Real value = %b", out3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_out3_exp[0] = out3_expected_prev[0];
	end
	if (
		( out3_expected_prev[1] !== 1'bx ) && ( out3_prev[1] !== out3_expected_prev[1] )
		&& ((out3_expected_prev[1] !== last_out3_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out3[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out3_expected_prev);
		$display ("     Real value = %b", out3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_out3_exp[1] = out3_expected_prev[1];
	end
	if (
		( out3_expected_prev[2] !== 1'bx ) && ( out3_prev[2] !== out3_expected_prev[2] )
		&& ((out3_expected_prev[2] !== last_out3_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out3[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out3_expected_prev);
		$display ("     Real value = %b", out3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_out3_exp[2] = out3_expected_prev[2];
	end
	if (
		( out3_expected_prev[3] !== 1'bx ) && ( out3_prev[3] !== out3_expected_prev[3] )
		&& ((out3_expected_prev[3] !== last_out3_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out3[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out3_expected_prev);
		$display ("     Real value = %b", out3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_out3_exp[3] = out3_expected_prev[3];
	end
	if (
		( out3_expected_prev[4] !== 1'bx ) && ( out3_prev[4] !== out3_expected_prev[4] )
		&& ((out3_expected_prev[4] !== last_out3_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out3[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out3_expected_prev);
		$display ("     Real value = %b", out3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_out3_exp[4] = out3_expected_prev[4];
	end
	if (
		( out3_expected_prev[5] !== 1'bx ) && ( out3_prev[5] !== out3_expected_prev[5] )
		&& ((out3_expected_prev[5] !== last_out3_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out3[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out3_expected_prev);
		$display ("     Real value = %b", out3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_out3_exp[5] = out3_expected_prev[5];
	end
	if (
		( out3_expected_prev[6] !== 1'bx ) && ( out3_prev[6] !== out3_expected_prev[6] )
		&& ((out3_expected_prev[6] !== last_out3_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out3[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out3_expected_prev);
		$display ("     Real value = %b", out3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_out3_exp[6] = out3_expected_prev[6];
	end
	if (
		( out4_expected_prev[0] !== 1'bx ) && ( out4_prev[0] !== out4_expected_prev[0] )
		&& ((out4_expected_prev[0] !== last_out4_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out4[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out4_expected_prev);
		$display ("     Real value = %b", out4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_out4_exp[0] = out4_expected_prev[0];
	end
	if (
		( out4_expected_prev[1] !== 1'bx ) && ( out4_prev[1] !== out4_expected_prev[1] )
		&& ((out4_expected_prev[1] !== last_out4_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out4[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out4_expected_prev);
		$display ("     Real value = %b", out4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_out4_exp[1] = out4_expected_prev[1];
	end
	if (
		( out4_expected_prev[2] !== 1'bx ) && ( out4_prev[2] !== out4_expected_prev[2] )
		&& ((out4_expected_prev[2] !== last_out4_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out4[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out4_expected_prev);
		$display ("     Real value = %b", out4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_out4_exp[2] = out4_expected_prev[2];
	end
	if (
		( out4_expected_prev[3] !== 1'bx ) && ( out4_prev[3] !== out4_expected_prev[3] )
		&& ((out4_expected_prev[3] !== last_out4_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out4[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out4_expected_prev);
		$display ("     Real value = %b", out4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_out4_exp[3] = out4_expected_prev[3];
	end
	if (
		( out4_expected_prev[4] !== 1'bx ) && ( out4_prev[4] !== out4_expected_prev[4] )
		&& ((out4_expected_prev[4] !== last_out4_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out4[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out4_expected_prev);
		$display ("     Real value = %b", out4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_out4_exp[4] = out4_expected_prev[4];
	end
	if (
		( out4_expected_prev[5] !== 1'bx ) && ( out4_prev[5] !== out4_expected_prev[5] )
		&& ((out4_expected_prev[5] !== last_out4_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out4[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out4_expected_prev);
		$display ("     Real value = %b", out4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_out4_exp[5] = out4_expected_prev[5];
	end
	if (
		( out4_expected_prev[6] !== 1'bx ) && ( out4_prev[6] !== out4_expected_prev[6] )
		&& ((out4_expected_prev[6] !== last_out4_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out4[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out4_expected_prev);
		$display ("     Real value = %b", out4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_out4_exp[6] = out4_expected_prev[6];
	end
	if (
		( out5_expected_prev[0] !== 1'bx ) && ( out5_prev[0] !== out5_expected_prev[0] )
		&& ((out5_expected_prev[0] !== last_out5_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out5[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out5_expected_prev);
		$display ("     Real value = %b", out5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_out5_exp[0] = out5_expected_prev[0];
	end
	if (
		( out5_expected_prev[1] !== 1'bx ) && ( out5_prev[1] !== out5_expected_prev[1] )
		&& ((out5_expected_prev[1] !== last_out5_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out5[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out5_expected_prev);
		$display ("     Real value = %b", out5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_out5_exp[1] = out5_expected_prev[1];
	end
	if (
		( out5_expected_prev[2] !== 1'bx ) && ( out5_prev[2] !== out5_expected_prev[2] )
		&& ((out5_expected_prev[2] !== last_out5_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out5[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out5_expected_prev);
		$display ("     Real value = %b", out5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_out5_exp[2] = out5_expected_prev[2];
	end
	if (
		( out5_expected_prev[3] !== 1'bx ) && ( out5_prev[3] !== out5_expected_prev[3] )
		&& ((out5_expected_prev[3] !== last_out5_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out5[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out5_expected_prev);
		$display ("     Real value = %b", out5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_out5_exp[3] = out5_expected_prev[3];
	end
	if (
		( out5_expected_prev[4] !== 1'bx ) && ( out5_prev[4] !== out5_expected_prev[4] )
		&& ((out5_expected_prev[4] !== last_out5_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out5[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out5_expected_prev);
		$display ("     Real value = %b", out5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_out5_exp[4] = out5_expected_prev[4];
	end
	if (
		( out5_expected_prev[5] !== 1'bx ) && ( out5_prev[5] !== out5_expected_prev[5] )
		&& ((out5_expected_prev[5] !== last_out5_exp[5]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out5[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out5_expected_prev);
		$display ("     Real value = %b", out5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_out5_exp[5] = out5_expected_prev[5];
	end
	if (
		( out5_expected_prev[6] !== 1'bx ) && ( out5_prev[6] !== out5_expected_prev[6] )
		&& ((out5_expected_prev[6] !== last_out5_exp[6]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out5[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out5_expected_prev);
		$display ("     Real value = %b", out5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_out5_exp[6] = out5_expected_prev[6];
	end
	if (
		( out6_expected_prev[0] !== 1'bx ) && ( out6_prev[0] !== out6_expected_prev[0] )
		&& ((out6_expected_prev[0] !== last_out6_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out6[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out6_expected_prev);
		$display ("     Real value = %b", out6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_out6_exp[0] = out6_expected_prev[0];
	end
	if (
		( out6_expected_prev[1] !== 1'bx ) && ( out6_prev[1] !== out6_expected_prev[1] )
		&& ((out6_expected_prev[1] !== last_out6_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out6[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out6_expected_prev);
		$display ("     Real value = %b", out6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_out6_exp[1] = out6_expected_prev[1];
	end
	if (
		( out6_expected_prev[2] !== 1'bx ) && ( out6_prev[2] !== out6_expected_prev[2] )
		&& ((out6_expected_prev[2] !== last_out6_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out6[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out6_expected_prev);
		$display ("     Real value = %b", out6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_out6_exp[2] = out6_expected_prev[2];
	end
	if (
		( out6_expected_prev[3] !== 1'bx ) && ( out6_prev[3] !== out6_expected_prev[3] )
		&& ((out6_expected_prev[3] !== last_out6_exp[3]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out6[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out6_expected_prev);
		$display ("     Real value = %b", out6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_out6_exp[3] = out6_expected_prev[3];
	end
	if (
		( out6_expected_prev[4] !== 1'bx ) && ( out6_prev[4] !== out6_expected_prev[4] )
		&& ((out6_expected_prev[4] !== last_out6_exp[4]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out6[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out6_expected_prev);
		$display ("     Real value = %b", out6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_out6_exp[4] = out6_expected_prev[4];
	end
	if (
		( out6_expected_prev[5] !== 1'bx ) && ( out6_prev[5] !== out6_expected_prev[5] )
		&& ((out6_expected_prev[5] !== last_out6_exp[5]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out6[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out6_expected_prev);
		$display ("     Real value = %b", out6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_out6_exp[5] = out6_expected_prev[5];
	end
	if (
		( out6_expected_prev[6] !== 1'bx ) && ( out6_prev[6] !== out6_expected_prev[6] )
		&& ((out6_expected_prev[6] !== last_out6_exp[6]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out6[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out6_expected_prev);
		$display ("     Real value = %b", out6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_out6_exp[6] = out6_expected_prev[6];
	end
	if (
		( out7_expected_prev[0] !== 1'bx ) && ( out7_prev[0] !== out7_expected_prev[0] )
		&& ((out7_expected_prev[0] !== last_out7_exp[0]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out7[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out7_expected_prev);
		$display ("     Real value = %b", out7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_out7_exp[0] = out7_expected_prev[0];
	end
	if (
		( out7_expected_prev[1] !== 1'bx ) && ( out7_prev[1] !== out7_expected_prev[1] )
		&& ((out7_expected_prev[1] !== last_out7_exp[1]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out7[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out7_expected_prev);
		$display ("     Real value = %b", out7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_out7_exp[1] = out7_expected_prev[1];
	end
	if (
		( out7_expected_prev[2] !== 1'bx ) && ( out7_prev[2] !== out7_expected_prev[2] )
		&& ((out7_expected_prev[2] !== last_out7_exp[2]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out7[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out7_expected_prev);
		$display ("     Real value = %b", out7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_out7_exp[2] = out7_expected_prev[2];
	end
	if (
		( out7_expected_prev[3] !== 1'bx ) && ( out7_prev[3] !== out7_expected_prev[3] )
		&& ((out7_expected_prev[3] !== last_out7_exp[3]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out7[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out7_expected_prev);
		$display ("     Real value = %b", out7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_out7_exp[3] = out7_expected_prev[3];
	end
	if (
		( out7_expected_prev[4] !== 1'bx ) && ( out7_prev[4] !== out7_expected_prev[4] )
		&& ((out7_expected_prev[4] !== last_out7_exp[4]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out7[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out7_expected_prev);
		$display ("     Real value = %b", out7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_out7_exp[4] = out7_expected_prev[4];
	end
	if (
		( out7_expected_prev[5] !== 1'bx ) && ( out7_prev[5] !== out7_expected_prev[5] )
		&& ((out7_expected_prev[5] !== last_out7_exp[5]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out7[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out7_expected_prev);
		$display ("     Real value = %b", out7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_out7_exp[5] = out7_expected_prev[5];
	end
	if (
		( out7_expected_prev[6] !== 1'bx ) && ( out7_prev[6] !== out7_expected_prev[6] )
		&& ((out7_expected_prev[6] !== last_out7_exp[6]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out7[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out7_expected_prev);
		$display ("     Real value = %b", out7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_out7_exp[6] = out7_expected_prev[6];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module characterPattern_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [0:14] input;
reg [0:2] s;
// wires                                               
wire [0:6] out0;
wire [0:6] out1;
wire [0:6] out2;
wire [0:6] out3;
wire [0:6] out4;
wire [0:6] out5;
wire [0:6] out6;
wire [0:6] out7;

wire sampler;                             

// assign statements (if any)                          
characterPattern i1 (
// port map - connection between master ports and signals/registers   
	.\input (input),
	.out0(out0),
	.out1(out1),
	.out2(out2),
	.out3(out3),
	.out4(out4),
	.out5(out5),
	.out6(out6),
	.out7(out7),
	.s(s)
);
// \input [ 14 ]
initial
begin
	input[14] = 1'b1;
end 
// \input [ 13 ]
initial
begin
	input[13] = 1'b1;
end 
// \input [ 12 ]
initial
begin
	input[12] = 1'b1;
end 
// \input [ 11 ]
initial
begin
	input[11] = 1'b1;
end 
// \input [ 10 ]
initial
begin
	input[10] = 1'b1;
end 
// \input [ 9 ]
initial
begin
	input[9] = 1'b0;
end 
// \input [ 8 ]
initial
begin
	input[8] = 1'b0;
end 
// \input [ 7 ]
initial
begin
	input[7] = 1'b1;
end 
// \input [ 6 ]
initial
begin
	input[6] = 1'b0;
end 
// \input [ 5 ]
initial
begin
	input[5] = 1'b1;
end 
// \input [ 4 ]
initial
begin
	input[4] = 1'b0;
end 
// \input [ 3 ]
initial
begin
	input[3] = 1'b0;
end 
// \input [ 2 ]
initial
begin
	input[2] = 1'b0;
end 
// \input [ 1 ]
initial
begin
	input[1] = 1'b0;
end 
// \input [ 0 ]
initial
begin
	input[0] = 1'b0;
end 
// s[ 2 ]
initial
begin
	s[2] = 1'b0;
end 
// s[ 1 ]
initial
begin
	s[1] = 1'b0;
end 
// s[ 0 ]
initial
begin
	s[0] = 1'b0;
end 

characterPattern_vlg_sample_tst tb_sample (
	.input(input),
	.s(s),
	.sampler_tx(sampler)
);

characterPattern_vlg_check_tst tb_out(
	.out0(out0),
	.out1(out1),
	.out2(out2),
	.out3(out3),
	.out4(out4),
	.out5(out5),
	.out6(out6),
	.out7(out7),
	.sampler_rx(sampler)
);
endmodule

